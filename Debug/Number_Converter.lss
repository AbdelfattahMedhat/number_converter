
Number_Converter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001154  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  00001154  000011e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080012a  0080012a  000012b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000289d  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c90  00000000  00000000  00003d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014ad  00000000  00000000  00004a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00005ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000793  00000000  00000000  000062e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a66  00000000  00000000  00006a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000084d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 32       	cpi	r26, 0x2A	; 42
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	aa e2       	ldi	r26, 0x2A	; 42
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 76 06 	call	0xcec	; 0xcec <main>
      8a:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <number_conv_init>:
	
}

void number_conv_write_DEC(u16 num)
{
	LCD_writeNumber(num);
      92:	61 e0       	ldi	r22, 0x01	; 1
      94:	80 e0       	ldi	r24, 0x00	; 0
      96:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
      9a:	80 e6       	ldi	r24, 0x60	; 96
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
      a2:	62 e0       	ldi	r22, 0x02	; 2
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
      aa:	8e e6       	ldi	r24, 0x6E	; 110
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
      b2:	2f ef       	ldi	r18, 0xFF	; 255
      b4:	89 e6       	ldi	r24, 0x69	; 105
      b6:	98 e1       	ldi	r25, 0x18	; 24
      b8:	21 50       	subi	r18, 0x01	; 1
      ba:	80 40       	sbci	r24, 0x00	; 0
      bc:	90 40       	sbci	r25, 0x00	; 0
      be:	e1 f7       	brne	.-8      	; 0xb8 <number_conv_init+0x26>
      c0:	00 c0       	rjmp	.+0      	; 0xc2 <number_conv_init+0x30>
      c2:	00 00       	nop
      c4:	08 95       	ret

000000c6 <number_conv_write_HEX>:
}
void number_conv_write_HEX(u16 num)
{ 
      c6:	cf 93       	push	r28
      c8:	c8 2f       	mov	r28, r24
 	LCD_WriteHex(num/(16*16));
      ca:	89 2f       	mov	r24, r25
      cc:	0e 94 26 06 	call	0xc4c	; 0xc4c <LCD_WriteHex>
 	LCD_WriteHex(num);
      d0:	8c 2f       	mov	r24, r28
      d2:	0e 94 26 06 	call	0xc4c	; 0xc4c <LCD_WriteHex>

}
      d6:	cf 91       	pop	r28
      d8:	08 95       	ret

000000da <number_conv_write_BIN>:
void number_conv_write_BIN(u16 num)
{
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
      de:	cf 93       	push	r28
      e0:	8c 01       	movw	r16, r24
u8 flag=0,counter=0;
for(s8 i=15;i>=0;i--)
      e2:	cf e0       	ldi	r28, 0x0F	; 15
 	LCD_WriteHex(num);

}
void number_conv_write_BIN(u16 num)
{
u8 flag=0,counter=0;
      e4:	20 e0       	ldi	r18, 0x00	; 0
for(s8 i=15;i>=0;i--)
      e6:	18 c0       	rjmp	.+48     	; 0x118 <number_conv_write_BIN+0x3e>
{
	if(flag==1 || READ_BIT(num,i))
      e8:	21 30       	cpi	r18, 0x01	; 1
      ea:	49 f0       	breq	.+18     	; 0xfe <number_conv_write_BIN+0x24>
      ec:	c8 01       	movw	r24, r16
      ee:	0c 2e       	mov	r0, r28
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <number_conv_write_BIN+0x1c>
      f2:	96 95       	lsr	r25
      f4:	87 95       	ror	r24
      f6:	0a 94       	dec	r0
      f8:	e2 f7       	brpl	.-8      	; 0xf2 <number_conv_write_BIN+0x18>
      fa:	80 ff       	sbrs	r24, 0
      fc:	0c c0       	rjmp	.+24     	; 0x116 <number_conv_write_BIN+0x3c>
	{
		LCD_writechar(READ_BIT(num,i)+'0');
      fe:	c8 01       	movw	r24, r16
     100:	0c 2e       	mov	r0, r28
     102:	02 c0       	rjmp	.+4      	; 0x108 <number_conv_write_BIN+0x2e>
     104:	96 95       	lsr	r25
     106:	87 95       	ror	r24
     108:	0a 94       	dec	r0
     10a:	e2 f7       	brpl	.-8      	; 0x104 <number_conv_write_BIN+0x2a>
     10c:	81 70       	andi	r24, 0x01	; 1
     10e:	80 5d       	subi	r24, 0xD0	; 208
     110:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_writechar>
		flag=1;
     114:	21 e0       	ldi	r18, 0x01	; 1

}
void number_conv_write_BIN(u16 num)
{
u8 flag=0,counter=0;
for(s8 i=15;i>=0;i--)
     116:	c1 50       	subi	r28, 0x01	; 1
     118:	cc 23       	and	r28, r28
     11a:	34 f7       	brge	.-52     	; 0xe8 <number_conv_write_BIN+0xe>
		flag=1;
		counter++;
	}
	
}
}
     11c:	cf 91       	pop	r28
     11e:	1f 91       	pop	r17
     120:	0f 91       	pop	r16
     122:	08 95       	ret

00000124 <Conv_From_Dec_To_Hex>:

void Conv_From_Dec_To_Hex(void)
{
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	cf 93       	push	r28
	u8 digit=0;
	u32 temp=0;
	LCD_Clear();
     12e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD_Clear>
	LCD_writestring("DEC:");
     132:	8a e7       	ldi	r24, 0x7A	; 122
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	LCD_SetCursor(SECOND,LINE_START);
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
	LCD_writestring("HEX:");
     142:	8f e7       	ldi	r24, 0x7F	; 127
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
}
}

void Conv_From_Dec_To_Hex(void)
{
	u8 digit=0;
     14a:	c0 e0       	ldi	r28, 0x00	; 0
	u32 temp=0;
	LCD_Clear();
	LCD_writestring("DEC:");
	LCD_SetCursor(SECOND,LINE_START);
	LCD_writestring("HEX:");
	while(digit!='c')
     14c:	6d c0       	rjmp	.+218    	; 0x228 <Conv_From_Dec_To_Hex+0x104>
	{
		 digit=keypad_getnumber();
     14e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <keypad_getnumber>
     152:	c8 2f       	mov	r28, r24
		  
		temp=Number;
     154:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <__data_end>
     158:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <__data_end+0x1>
     15c:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <__data_end+0x2>
     160:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <__data_end+0x3>
		temp=((temp*10)+(digit-'0'));
     164:	6a 01       	movw	r12, r20
     166:	7b 01       	movw	r14, r22
     168:	cc 0c       	add	r12, r12
     16a:	dd 1c       	adc	r13, r13
     16c:	ee 1c       	adc	r14, r14
     16e:	ff 1c       	adc	r15, r15
     170:	d7 01       	movw	r26, r14
     172:	c6 01       	movw	r24, r12
     174:	88 0f       	add	r24, r24
     176:	99 1f       	adc	r25, r25
     178:	aa 1f       	adc	r26, r26
     17a:	bb 1f       	adc	r27, r27
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	aa 1f       	adc	r26, r26
     182:	bb 1f       	adc	r27, r27
     184:	c8 0e       	add	r12, r24
     186:	d9 1e       	adc	r13, r25
     188:	ea 1e       	adc	r14, r26
     18a:	fb 1e       	adc	r15, r27
     18c:	2c 2f       	mov	r18, r28
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	20 53       	subi	r18, 0x30	; 48
     192:	31 09       	sbc	r19, r1
     194:	c9 01       	movw	r24, r18
     196:	33 0f       	add	r19, r19
     198:	aa 0b       	sbc	r26, r26
     19a:	bb 0b       	sbc	r27, r27
     19c:	c8 0e       	add	r12, r24
     19e:	d9 1e       	adc	r13, r25
     1a0:	ea 1e       	adc	r14, r26
     1a2:	fb 1e       	adc	r15, r27
		if(digit>='0' && digit<='9' && temp<=MAX_DEC_NUM)
     1a4:	80 ed       	ldi	r24, 0xD0	; 208
     1a6:	8c 0f       	add	r24, r28
     1a8:	8a 30       	cpi	r24, 0x0A	; 10
     1aa:	50 f5       	brcc	.+84     	; 0x200 <Conv_From_Dec_To_Hex+0xdc>
     1ac:	c1 14       	cp	r12, r1
     1ae:	d1 04       	cpc	r13, r1
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	e8 06       	cpc	r14, r24
     1b4:	f1 04       	cpc	r15, r1
     1b6:	20 f5       	brcc	.+72     	; 0x200 <Conv_From_Dec_To_Hex+0xdc>
		{
			if(Number==0)
     1b8:	45 2b       	or	r20, r21
     1ba:	46 2b       	or	r20, r22
     1bc:	47 2b       	or	r20, r23
     1be:	a1 f4       	brne	.+40     	; 0x1e8 <Conv_From_Dec_To_Hex+0xc4>
			{
				LCD_SetCursor(FIRST,LENGTH);
     1c0:	64 e0       	ldi	r22, 0x04	; 4
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
				LCD_writestring("            ");
     1c8:	84 e8       	ldi	r24, 0x84	; 132
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
				LCD_SetCursor(SECOND,LENGTH);
     1d0:	64 e0       	ldi	r22, 0x04	; 4
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
				LCD_writestring("            ");
     1d8:	84 e8       	ldi	r24, 0x84	; 132
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
				LCD_SetCursor(FIRST,LENGTH);
     1e0:	64 e0       	ldi	r22, 0x04	; 4
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
			}
			LCD_writechar(digit);
     1e8:	8c 2f       	mov	r24, r28
     1ea:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_writechar>
			Number=temp;	
     1ee:	c0 92 2a 01 	sts	0x012A, r12	; 0x80012a <__data_end>
     1f2:	d0 92 2b 01 	sts	0x012B, r13	; 0x80012b <__data_end+0x1>
     1f6:	e0 92 2c 01 	sts	0x012C, r14	; 0x80012c <__data_end+0x2>
     1fa:	f0 92 2d 01 	sts	0x012D, r15	; 0x80012d <__data_end+0x3>
     1fe:	14 c0       	rjmp	.+40     	; 0x228 <Conv_From_Dec_To_Hex+0x104>
		}
		else if(digit=='=')
     200:	cd 33       	cpi	r28, 0x3D	; 61
     202:	91 f4       	brne	.+36     	; 0x228 <Conv_From_Dec_To_Hex+0x104>
		{
			LCD_SetCursor(SECOND,LENGTH);
     204:	64 e0       	ldi	r22, 0x04	; 4
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
			number_conv_write_HEX(Number);
     20c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     210:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
     214:	0e 94 63 00 	call	0xc6	; 0xc6 <number_conv_write_HEX>
			Number=0;
     218:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
     21c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0x1>
     220:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end+0x2>
     224:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__data_end+0x3>
	u32 temp=0;
	LCD_Clear();
	LCD_writestring("DEC:");
	LCD_SetCursor(SECOND,LINE_START);
	LCD_writestring("HEX:");
	while(digit!='c')
     228:	c3 36       	cpi	r28, 0x63	; 99
     22a:	09 f0       	breq	.+2      	; 0x22e <Conv_From_Dec_To_Hex+0x10a>
     22c:	90 cf       	rjmp	.-224    	; 0x14e <Conv_From_Dec_To_Hex+0x2a>
			Number=0;
		}
		
	}
	
}
     22e:	cf 91       	pop	r28
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	08 95       	ret

0000023a <Conv_From_Dec_To_Bin>:
void Conv_From_Dec_To_Bin(void)
{
     23a:	cf 92       	push	r12
     23c:	df 92       	push	r13
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	cf 93       	push	r28
	u8 digit=0;
	u32 temp=0;
	LCD_Clear();
     244:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD_Clear>
	LCD_writestring("DEC:");
     248:	8a e7       	ldi	r24, 0x7A	; 122
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	LCD_SetCursor(SECOND,LINE_START);
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
	LCD_writestring("BIN:");
     258:	81 e9       	ldi	r24, 0x91	; 145
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	}
	
}
void Conv_From_Dec_To_Bin(void)
{
	u8 digit=0;
     260:	c0 e0       	ldi	r28, 0x00	; 0
	u32 temp=0;
	LCD_Clear();
	LCD_writestring("DEC:");
	LCD_SetCursor(SECOND,LINE_START);
	LCD_writestring("BIN:");
	while(digit!='c')
     262:	6d c0       	rjmp	.+218    	; 0x33e <Conv_From_Dec_To_Bin+0x104>
	{
		digit=keypad_getnumber();
     264:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <keypad_getnumber>
     268:	c8 2f       	mov	r28, r24
		temp=Number;
     26a:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <__data_end>
     26e:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <__data_end+0x1>
     272:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <__data_end+0x2>
     276:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <__data_end+0x3>
		temp=((temp*10)+(digit-'0'));
     27a:	6a 01       	movw	r12, r20
     27c:	7b 01       	movw	r14, r22
     27e:	cc 0c       	add	r12, r12
     280:	dd 1c       	adc	r13, r13
     282:	ee 1c       	adc	r14, r14
     284:	ff 1c       	adc	r15, r15
     286:	d7 01       	movw	r26, r14
     288:	c6 01       	movw	r24, r12
     28a:	88 0f       	add	r24, r24
     28c:	99 1f       	adc	r25, r25
     28e:	aa 1f       	adc	r26, r26
     290:	bb 1f       	adc	r27, r27
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	aa 1f       	adc	r26, r26
     298:	bb 1f       	adc	r27, r27
     29a:	c8 0e       	add	r12, r24
     29c:	d9 1e       	adc	r13, r25
     29e:	ea 1e       	adc	r14, r26
     2a0:	fb 1e       	adc	r15, r27
     2a2:	2c 2f       	mov	r18, r28
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	20 53       	subi	r18, 0x30	; 48
     2a8:	31 09       	sbc	r19, r1
     2aa:	c9 01       	movw	r24, r18
     2ac:	33 0f       	add	r19, r19
     2ae:	aa 0b       	sbc	r26, r26
     2b0:	bb 0b       	sbc	r27, r27
     2b2:	c8 0e       	add	r12, r24
     2b4:	d9 1e       	adc	r13, r25
     2b6:	ea 1e       	adc	r14, r26
     2b8:	fb 1e       	adc	r15, r27
		if(digit>='0' && digit<='9' && temp<=MAX_BIN_NUM)
     2ba:	80 ed       	ldi	r24, 0xD0	; 208
     2bc:	8c 0f       	add	r24, r28
     2be:	8a 30       	cpi	r24, 0x0A	; 10
     2c0:	50 f5       	brcc	.+84     	; 0x316 <Conv_From_Dec_To_Bin+0xdc>
     2c2:	c1 14       	cp	r12, r1
     2c4:	80 e1       	ldi	r24, 0x10	; 16
     2c6:	d8 06       	cpc	r13, r24
     2c8:	e1 04       	cpc	r14, r1
     2ca:	f1 04       	cpc	r15, r1
     2cc:	20 f5       	brcc	.+72     	; 0x316 <Conv_From_Dec_To_Bin+0xdc>
		{
			if(Number==0)
     2ce:	45 2b       	or	r20, r21
     2d0:	46 2b       	or	r20, r22
     2d2:	47 2b       	or	r20, r23
     2d4:	a1 f4       	brne	.+40     	; 0x2fe <Conv_From_Dec_To_Bin+0xc4>
			{
				LCD_SetCursor(FIRST,LENGTH);
     2d6:	64 e0       	ldi	r22, 0x04	; 4
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
				LCD_writestring("            ");
     2de:	84 e8       	ldi	r24, 0x84	; 132
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
				LCD_SetCursor(SECOND,LENGTH);
     2e6:	64 e0       	ldi	r22, 0x04	; 4
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
				LCD_writestring("            ");
     2ee:	84 e8       	ldi	r24, 0x84	; 132
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
				LCD_SetCursor(FIRST,LENGTH);
     2f6:	64 e0       	ldi	r22, 0x04	; 4
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
			}
			LCD_writechar(digit);
     2fe:	8c 2f       	mov	r24, r28
     300:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_writechar>
			Number=temp;
     304:	c0 92 2a 01 	sts	0x012A, r12	; 0x80012a <__data_end>
     308:	d0 92 2b 01 	sts	0x012B, r13	; 0x80012b <__data_end+0x1>
     30c:	e0 92 2c 01 	sts	0x012C, r14	; 0x80012c <__data_end+0x2>
     310:	f0 92 2d 01 	sts	0x012D, r15	; 0x80012d <__data_end+0x3>
     314:	14 c0       	rjmp	.+40     	; 0x33e <Conv_From_Dec_To_Bin+0x104>
		}
		else if(digit=='=')
     316:	cd 33       	cpi	r28, 0x3D	; 61
     318:	91 f4       	brne	.+36     	; 0x33e <Conv_From_Dec_To_Bin+0x104>
		{
			LCD_SetCursor(SECOND,LENGTH);
     31a:	64 e0       	ldi	r22, 0x04	; 4
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
			number_conv_write_BIN(Number);
     322:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     326:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
     32a:	0e 94 6d 00 	call	0xda	; 0xda <number_conv_write_BIN>
			Number=0;
     32e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
     332:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0x1>
     336:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end+0x2>
     33a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__data_end+0x3>
	u32 temp=0;
	LCD_Clear();
	LCD_writestring("DEC:");
	LCD_SetCursor(SECOND,LINE_START);
	LCD_writestring("BIN:");
	while(digit!='c')
     33e:	c3 36       	cpi	r28, 0x63	; 99
     340:	09 f0       	breq	.+2      	; 0x344 <Conv_From_Dec_To_Bin+0x10a>
     342:	90 cf       	rjmp	.-224    	; 0x264 <Conv_From_Dec_To_Bin+0x2a>
			number_conv_write_BIN(Number);
			Number=0;
		}
		
	}
}
     344:	cf 91       	pop	r28
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	df 90       	pop	r13
     34c:	cf 90       	pop	r12
     34e:	08 95       	ret

00000350 <Hex_to_Dec>:
			i--;
		}
	}
}
u16 Hex_to_Dec(u8 * hex,u8 size)
{
     350:	dc 01       	movw	r26, r24
	s8 i;
	u16 num=0;
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	90 e0       	ldi	r25, 0x00	; 0
	for(i=3;i>=size;i--)
     356:	43 e0       	ldi	r20, 0x03	; 3
     358:	1e c0       	rjmp	.+60     	; 0x396 <Hex_to_Dec+0x46>
	{
		if(hex[i]>='0' && hex[i]<='9')
     35a:	fd 01       	movw	r30, r26
     35c:	e4 0f       	add	r30, r20
     35e:	f1 1d       	adc	r31, r1
     360:	47 fd       	sbrc	r20, 7
     362:	fa 95       	dec	r31
     364:	20 81       	ld	r18, Z
     366:	30 ed       	ldi	r19, 0xD0	; 208
     368:	32 0f       	add	r19, r18
     36a:	3a 30       	cpi	r19, 0x0A	; 10
     36c:	50 f4       	brcc	.+20     	; 0x382 <Hex_to_Dec+0x32>
		num=(num*16)+(hex[i]-'0');
     36e:	82 95       	swap	r24
     370:	92 95       	swap	r25
     372:	90 7f       	andi	r25, 0xF0	; 240
     374:	98 27       	eor	r25, r24
     376:	80 7f       	andi	r24, 0xF0	; 240
     378:	98 27       	eor	r25, r24
     37a:	82 0f       	add	r24, r18
     37c:	91 1d       	adc	r25, r1
     37e:	c0 97       	sbiw	r24, 0x30	; 48
     380:	09 c0       	rjmp	.+18     	; 0x394 <Hex_to_Dec+0x44>
		else
		num=(num*16)+(hex[i]-'A'+10);
     382:	82 95       	swap	r24
     384:	92 95       	swap	r25
     386:	90 7f       	andi	r25, 0xF0	; 240
     388:	98 27       	eor	r25, r24
     38a:	80 7f       	andi	r24, 0xF0	; 240
     38c:	98 27       	eor	r25, r24
     38e:	82 0f       	add	r24, r18
     390:	91 1d       	adc	r25, r1
     392:	c7 97       	sbiw	r24, 0x37	; 55
}
u16 Hex_to_Dec(u8 * hex,u8 size)
{
	s8 i;
	u16 num=0;
	for(i=3;i>=size;i--)
     394:	41 50       	subi	r20, 0x01	; 1
     396:	e6 2f       	mov	r30, r22
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	24 2f       	mov	r18, r20
     39c:	04 2e       	mov	r0, r20
     39e:	00 0c       	add	r0, r0
     3a0:	33 0b       	sbc	r19, r19
     3a2:	2e 17       	cp	r18, r30
     3a4:	3f 07       	cpc	r19, r31
     3a6:	cc f6       	brge	.-78     	; 0x35a <Hex_to_Dec+0xa>
		num=(num*16)+(hex[i]-'0');
		else
		num=(num*16)+(hex[i]-'A'+10);
	}
	return num;
}
     3a8:	08 95       	ret

000003aa <Conv_From_Hex_To_Dec>:
		}
		
	}
}
void Conv_From_Hex_To_Dec(void)
{
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <Conv_From_Hex_To_Dec+0xa>
     3b4:	00 d0       	rcall	.+0      	; 0x3b6 <Conv_From_Hex_To_Dec+0xc>
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
	u8 digit=0,hex[4]={0};
     3ba:	19 82       	std	Y+1, r1	; 0x01
     3bc:	1a 82       	std	Y+2, r1	; 0x02
     3be:	1b 82       	std	Y+3, r1	; 0x03
     3c0:	1c 82       	std	Y+4, r1	; 0x04
		s8 i=3;
	LCD_Clear();
     3c2:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD_Clear>
	LCD_writestring("HEX:");
     3c6:	8f e7       	ldi	r24, 0x7F	; 127
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	LCD_SetCursor(SECOND,LINE_START);
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
	LCD_writestring("DEC:");
     3d6:	8a e7       	ldi	r24, 0x7A	; 122
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	}
}
void Conv_From_Hex_To_Dec(void)
{
	u8 digit=0,hex[4]={0};
		s8 i=3;
     3de:	03 e0       	ldi	r16, 0x03	; 3
		
	}
}
void Conv_From_Hex_To_Dec(void)
{
	u8 digit=0,hex[4]={0};
     3e0:	10 e0       	ldi	r17, 0x00	; 0
		s8 i=3;
	LCD_Clear();
	LCD_writestring("HEX:");
	LCD_SetCursor(SECOND,LINE_START);
	LCD_writestring("DEC:");
	while(digit!='c')
     3e2:	57 c0       	rjmp	.+174    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
	{
		digit=keypad_getnumber();
     3e4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <keypad_getnumber>
     3e8:	18 2f       	mov	r17, r24
		
		if(digit=='=')
     3ea:	8d 33       	cpi	r24, 0x3D	; 61
     3ec:	f9 f4       	brne	.+62     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			i++;
     3ee:	0f 5f       	subi	r16, 0xFF	; 255
			LCD_SetCursor(SECOND,LENGTH);
     3f0:	64 e0       	ldi	r22, 0x04	; 4
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
			LCD_writeNumber(Hex_to_Dec(hex,i));
     3f8:	60 2f       	mov	r22, r16
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	0e 94 a8 01 	call	0x350	; 0x350 <Hex_to_Dec>
     402:	bc 01       	movw	r22, r24
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 a0 05 	call	0xb40	; 0xb40 <LCD_writeNumber>
			for(i=0;i<4;i++)
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	0a c0       	rjmp	.+20     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			{
				hex[i]=0;
     410:	e1 e0       	ldi	r30, 0x01	; 1
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	ec 0f       	add	r30, r28
     416:	fd 1f       	adc	r31, r29
     418:	e8 0f       	add	r30, r24
     41a:	f1 1d       	adc	r31, r1
     41c:	87 fd       	sbrc	r24, 7
     41e:	fa 95       	dec	r31
     420:	10 82       	st	Z, r1
		if(digit=='=')
		{
			i++;
			LCD_SetCursor(SECOND,LENGTH);
			LCD_writeNumber(Hex_to_Dec(hex,i));
			for(i=0;i<4;i++)
     422:	8f 5f       	subi	r24, 0xFF	; 255
     424:	84 30       	cpi	r24, 0x04	; 4
     426:	a4 f3       	brlt	.-24     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			{
				hex[i]=0;
			}
			i=3;
     428:	03 e0       	ldi	r16, 0x03	; 3
     42a:	33 c0       	rjmp	.+102    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
		}
		else if(digit!=NO_KEY && i>=0)
     42c:	82 35       	cpi	r24, 0x52	; 82
     42e:	89 f1       	breq	.+98     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     430:	00 23       	and	r16, r16
     432:	7c f1       	brlt	.+94     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
		{
			if(Number==0 && i==3)
     434:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     438:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
     43c:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <__data_end+0x2>
     440:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <__data_end+0x3>
     444:	89 2b       	or	r24, r25
     446:	8a 2b       	or	r24, r26
     448:	8b 2b       	or	r24, r27
     44a:	b1 f4       	brne	.+44     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     44c:	03 30       	cpi	r16, 0x03	; 3
     44e:	a1 f4       	brne	.+40     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
			{
				LCD_SetCursor(FIRST,LENGTH);
     450:	64 e0       	ldi	r22, 0x04	; 4
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
				LCD_writestring("            ");
     458:	84 e8       	ldi	r24, 0x84	; 132
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
				LCD_SetCursor(SECOND,LENGTH);
     460:	64 e0       	ldi	r22, 0x04	; 4
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
				LCD_writestring("            ");
     468:	84 e8       	ldi	r24, 0x84	; 132
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
				LCD_SetCursor(FIRST,LENGTH);
     470:	64 e0       	ldi	r22, 0x04	; 4
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
			}
			LCD_writechar(digit);
     478:	81 2f       	mov	r24, r17
     47a:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_writechar>
			hex[i]=digit;
     47e:	e1 e0       	ldi	r30, 0x01	; 1
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	ec 0f       	add	r30, r28
     484:	fd 1f       	adc	r31, r29
     486:	e0 0f       	add	r30, r16
     488:	f1 1d       	adc	r31, r1
     48a:	07 fd       	sbrc	r16, 7
     48c:	fa 95       	dec	r31
     48e:	10 83       	st	Z, r17
			i--;
     490:	01 50       	subi	r16, 0x01	; 1
		s8 i=3;
	LCD_Clear();
	LCD_writestring("HEX:");
	LCD_SetCursor(SECOND,LINE_START);
	LCD_writestring("DEC:");
	while(digit!='c')
     492:	13 36       	cpi	r17, 0x63	; 99
     494:	09 f0       	breq	.+2      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     496:	a6 cf       	rjmp	.-180    	; 0x3e4 <Conv_From_Hex_To_Dec+0x3a>
			LCD_writechar(digit);
			hex[i]=digit;
			i--;
		}
	}
}
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	08 95       	ret

000004aa <Conv_From_Hex_To_Bin>:
void Conv_From_Hex_To_Bin(void)
{
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <Conv_From_Hex_To_Bin+0xa>
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <Conv_From_Hex_To_Bin+0xc>
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
	u8 digit=0,hex[4]={0};
     4ba:	19 82       	std	Y+1, r1	; 0x01
     4bc:	1a 82       	std	Y+2, r1	; 0x02
     4be:	1b 82       	std	Y+3, r1	; 0x03
     4c0:	1c 82       	std	Y+4, r1	; 0x04
	s8 i=3;
	LCD_Clear();
     4c2:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD_Clear>
	LCD_writestring("HEX:");
     4c6:	8f e7       	ldi	r24, 0x7F	; 127
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	LCD_SetCursor(SECOND,LINE_START);
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
	LCD_writestring("BIN:");
     4d6:	81 e9       	ldi	r24, 0x91	; 145
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	}
}
void Conv_From_Hex_To_Bin(void)
{
	u8 digit=0,hex[4]={0};
	s8 i=3;
     4de:	03 e0       	ldi	r16, 0x03	; 3
		}
	}
}
void Conv_From_Hex_To_Bin(void)
{
	u8 digit=0,hex[4]={0};
     4e0:	10 e0       	ldi	r17, 0x00	; 0
	s8 i=3;
	LCD_Clear();
	LCD_writestring("HEX:");
	LCD_SetCursor(SECOND,LINE_START);
	LCD_writestring("BIN:");
	while(digit!='c')
     4e2:	54 c0       	rjmp	.+168    	; 0x58c <Conv_From_Hex_To_Bin+0xe2>
	{
		digit=keypad_getnumber();
     4e4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <keypad_getnumber>
     4e8:	18 2f       	mov	r17, r24
		
		if(digit=='=')
     4ea:	8d 33       	cpi	r24, 0x3D	; 61
     4ec:	e1 f4       	brne	.+56     	; 0x526 <Conv_From_Hex_To_Bin+0x7c>
		{
			i++;
     4ee:	0f 5f       	subi	r16, 0xFF	; 255
			LCD_SetCursor(SECOND,LENGTH);
     4f0:	64 e0       	ldi	r22, 0x04	; 4
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
			number_conv_write_BIN(Hex_to_Dec(hex,i));
     4f8:	60 2f       	mov	r22, r16
     4fa:	ce 01       	movw	r24, r28
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	0e 94 a8 01 	call	0x350	; 0x350 <Hex_to_Dec>
     502:	0e 94 6d 00 	call	0xda	; 0xda <number_conv_write_BIN>
			for(i=0;i<4;i++)
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	0a c0       	rjmp	.+20     	; 0x51e <Conv_From_Hex_To_Bin+0x74>
			{
				hex[i]=0;
     50a:	e1 e0       	ldi	r30, 0x01	; 1
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	ec 0f       	add	r30, r28
     510:	fd 1f       	adc	r31, r29
     512:	e8 0f       	add	r30, r24
     514:	f1 1d       	adc	r31, r1
     516:	87 fd       	sbrc	r24, 7
     518:	fa 95       	dec	r31
     51a:	10 82       	st	Z, r1
		if(digit=='=')
		{
			i++;
			LCD_SetCursor(SECOND,LENGTH);
			number_conv_write_BIN(Hex_to_Dec(hex,i));
			for(i=0;i<4;i++)
     51c:	8f 5f       	subi	r24, 0xFF	; 255
     51e:	84 30       	cpi	r24, 0x04	; 4
     520:	a4 f3       	brlt	.-24     	; 0x50a <Conv_From_Hex_To_Bin+0x60>
			{
				hex[i]=0;
			}
			i=3;
     522:	03 e0       	ldi	r16, 0x03	; 3
     524:	33 c0       	rjmp	.+102    	; 0x58c <Conv_From_Hex_To_Bin+0xe2>
		}
		else if(digit!=NO_KEY && i>0)
     526:	82 35       	cpi	r24, 0x52	; 82
     528:	89 f1       	breq	.+98     	; 0x58c <Conv_From_Hex_To_Bin+0xe2>
     52a:	10 16       	cp	r1, r16
     52c:	7c f5       	brge	.+94     	; 0x58c <Conv_From_Hex_To_Bin+0xe2>
		{
			if(Number==0 && i==3)
     52e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     532:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
     536:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <__data_end+0x2>
     53a:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <__data_end+0x3>
     53e:	89 2b       	or	r24, r25
     540:	8a 2b       	or	r24, r26
     542:	8b 2b       	or	r24, r27
     544:	b1 f4       	brne	.+44     	; 0x572 <Conv_From_Hex_To_Bin+0xc8>
     546:	03 30       	cpi	r16, 0x03	; 3
     548:	a1 f4       	brne	.+40     	; 0x572 <Conv_From_Hex_To_Bin+0xc8>
			{
				LCD_SetCursor(FIRST,LENGTH);
     54a:	64 e0       	ldi	r22, 0x04	; 4
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
				LCD_writestring("            ");
     552:	84 e8       	ldi	r24, 0x84	; 132
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
				LCD_SetCursor(SECOND,LENGTH);
     55a:	64 e0       	ldi	r22, 0x04	; 4
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
				LCD_writestring("            ");
     562:	84 e8       	ldi	r24, 0x84	; 132
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
				LCD_SetCursor(FIRST,LENGTH);
     56a:	64 e0       	ldi	r22, 0x04	; 4
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
			}
			LCD_writechar(digit);
     572:	81 2f       	mov	r24, r17
     574:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_writechar>
			hex[i]=digit;
     578:	e1 e0       	ldi	r30, 0x01	; 1
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	ec 0f       	add	r30, r28
     57e:	fd 1f       	adc	r31, r29
     580:	e0 0f       	add	r30, r16
     582:	f1 1d       	adc	r31, r1
     584:	07 fd       	sbrc	r16, 7
     586:	fa 95       	dec	r31
     588:	10 83       	st	Z, r17
			i--;
     58a:	01 50       	subi	r16, 0x01	; 1
	s8 i=3;
	LCD_Clear();
	LCD_writestring("HEX:");
	LCD_SetCursor(SECOND,LINE_START);
	LCD_writestring("BIN:");
	while(digit!='c')
     58c:	13 36       	cpi	r17, 0x63	; 99
     58e:	09 f0       	breq	.+2      	; 0x592 <Conv_From_Hex_To_Bin+0xe8>
     590:	a9 cf       	rjmp	.-174    	; 0x4e4 <Conv_From_Hex_To_Bin+0x3a>
			LCD_writechar(digit);
			hex[i]=digit;
			i--;
		}
	}
}
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	08 95       	ret

000005a4 <Bin_to_Dec>:
	}
	return num;
}

u16 Bin_to_Dec(u8 * bin,u8 size)
{
     5a4:	dc 01       	movw	r26, r24
	s8 i;
	u16 num=0;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
	for(i=11;i>=size;i--)
     5aa:	4b e0       	ldi	r20, 0x0B	; 11
     5ac:	0c c0       	rjmp	.+24     	; 0x5c6 <Bin_to_Dec+0x22>
	{
		num=(num*2)+(bin[i]-'0');	
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	fd 01       	movw	r30, r26
     5b4:	e4 0f       	add	r30, r20
     5b6:	f1 1d       	adc	r31, r1
     5b8:	47 fd       	sbrc	r20, 7
     5ba:	fa 95       	dec	r31
     5bc:	20 81       	ld	r18, Z
     5be:	82 0f       	add	r24, r18
     5c0:	91 1d       	adc	r25, r1
     5c2:	c0 97       	sbiw	r24, 0x30	; 48

u16 Bin_to_Dec(u8 * bin,u8 size)
{
	s8 i;
	u16 num=0;
	for(i=11;i>=size;i--)
     5c4:	41 50       	subi	r20, 0x01	; 1
     5c6:	e6 2f       	mov	r30, r22
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	24 2f       	mov	r18, r20
     5cc:	04 2e       	mov	r0, r20
     5ce:	00 0c       	add	r0, r0
     5d0:	33 0b       	sbc	r19, r19
     5d2:	2e 17       	cp	r18, r30
     5d4:	3f 07       	cpc	r19, r31
     5d6:	5c f7       	brge	.-42     	; 0x5ae <Bin_to_Dec+0xa>
	{
		num=(num*2)+(bin[i]-'0');	
	}
	return num;
     5d8:	08 95       	ret

000005da <Conv_From_Bin_To_Dec>:
			i--;
		}
	}
}
void Conv_From_Bin_To_Dec(void)
{
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	2c 97       	sbiw	r28, 0x0c	; 12
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
	u8 digit=0,bin[12]={0};
     5f2:	fe 01       	movw	r30, r28
     5f4:	31 96       	adiw	r30, 0x01	; 1
     5f6:	8c e0       	ldi	r24, 0x0C	; 12
     5f8:	df 01       	movw	r26, r30
     5fa:	1d 92       	st	X+, r1
     5fc:	8a 95       	dec	r24
     5fe:	e9 f7       	brne	.-6      	; 0x5fa <Conv_From_Bin_To_Dec+0x20>
	s8 i=11;
	LCD_Clear();
     600:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD_Clear>
	LCD_writestring("BIN:");
     604:	81 e9       	ldi	r24, 0x91	; 145
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	LCD_SetCursor(SECOND,LINE_START);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
	LCD_writestring("DEC:");
     614:	8a e7       	ldi	r24, 0x7A	; 122
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	}
}
void Conv_From_Bin_To_Dec(void)
{
	u8 digit=0,bin[12]={0};
	s8 i=11;
     61c:	1b e0       	ldi	r17, 0x0B	; 11
		}
	}
}
void Conv_From_Bin_To_Dec(void)
{
	u8 digit=0,bin[12]={0};
     61e:	00 e0       	ldi	r16, 0x00	; 0
	s8 i=11;
	LCD_Clear();
	LCD_writestring("BIN:");
	LCD_SetCursor(SECOND,LINE_START);
	LCD_writestring("DEC:");
	while(digit!='c')
     620:	4e c0       	rjmp	.+156    	; 0x6be <Conv_From_Bin_To_Dec+0xe4>
	{
		digit=keypad_getnumber();
     622:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <keypad_getnumber>
     626:	08 2f       	mov	r16, r24
		
		if(digit=='=')
     628:	8d 33       	cpi	r24, 0x3D	; 61
     62a:	01 f5       	brne	.+64     	; 0x66c <Conv_From_Bin_To_Dec+0x92>
		{
			i++;
     62c:	1f 5f       	subi	r17, 0xFF	; 255
			LCD_SetCursor(SECOND,LENGTH);
     62e:	64 e0       	ldi	r22, 0x04	; 4
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
			LCD_writeNumber(Bin_to_Dec(bin,i));
     636:	61 2f       	mov	r22, r17
     638:	ce 01       	movw	r24, r28
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Bin_to_Dec>
     640:	bc 01       	movw	r22, r24
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 a0 05 	call	0xb40	; 0xb40 <LCD_writeNumber>
			for(i=0;i<12;i++)
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	0a c0       	rjmp	.+20     	; 0x662 <Conv_From_Bin_To_Dec+0x88>
			{
				bin[i]=0;
     64e:	e1 e0       	ldi	r30, 0x01	; 1
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	ec 0f       	add	r30, r28
     654:	fd 1f       	adc	r31, r29
     656:	e6 0f       	add	r30, r22
     658:	f1 1d       	adc	r31, r1
     65a:	67 fd       	sbrc	r22, 7
     65c:	fa 95       	dec	r31
     65e:	10 82       	st	Z, r1
		if(digit=='=')
		{
			i++;
			LCD_SetCursor(SECOND,LENGTH);
			LCD_writeNumber(Bin_to_Dec(bin,i));
			for(i=0;i<12;i++)
     660:	6f 5f       	subi	r22, 0xFF	; 255
     662:	6c 30       	cpi	r22, 0x0C	; 12
     664:	a4 f3       	brlt	.-24     	; 0x64e <Conv_From_Bin_To_Dec+0x74>
			{
				bin[i]=0;
			}
			i--;
     666:	1f ef       	ldi	r17, 0xFF	; 255
     668:	16 0f       	add	r17, r22
     66a:	29 c0       	rjmp	.+82     	; 0x6be <Conv_From_Bin_To_Dec+0xe4>
		}
		else if((digit=='0' || digit=='1')&&i>=0)//3 is least index in bin array
     66c:	80 ed       	ldi	r24, 0xD0	; 208
     66e:	80 0f       	add	r24, r16
     670:	82 30       	cpi	r24, 0x02	; 2
     672:	28 f5       	brcc	.+74     	; 0x6be <Conv_From_Bin_To_Dec+0xe4>
     674:	11 23       	and	r17, r17
     676:	1c f1       	brlt	.+70     	; 0x6be <Conv_From_Bin_To_Dec+0xe4>
		{
			if(i==11)
     678:	1b 30       	cpi	r17, 0x0B	; 11
     67a:	a1 f4       	brne	.+40     	; 0x6a4 <Conv_From_Bin_To_Dec+0xca>
			{
				LCD_SetCursor(FIRST,LENGTH);
     67c:	64 e0       	ldi	r22, 0x04	; 4
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
				LCD_writestring("            ");
     684:	84 e8       	ldi	r24, 0x84	; 132
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
				LCD_SetCursor(SECOND,LENGTH);
     68c:	64 e0       	ldi	r22, 0x04	; 4
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
				LCD_writestring("            ");
     694:	84 e8       	ldi	r24, 0x84	; 132
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
				LCD_SetCursor(FIRST,LENGTH);
     69c:	64 e0       	ldi	r22, 0x04	; 4
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
			}
			LCD_writechar(digit);
     6a4:	80 2f       	mov	r24, r16
     6a6:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_writechar>
			bin[i]=digit;
     6aa:	e1 e0       	ldi	r30, 0x01	; 1
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	ec 0f       	add	r30, r28
     6b0:	fd 1f       	adc	r31, r29
     6b2:	e1 0f       	add	r30, r17
     6b4:	f1 1d       	adc	r31, r1
     6b6:	17 fd       	sbrc	r17, 7
     6b8:	fa 95       	dec	r31
     6ba:	00 83       	st	Z, r16
			i--;
     6bc:	11 50       	subi	r17, 0x01	; 1
	s8 i=11;
	LCD_Clear();
	LCD_writestring("BIN:");
	LCD_SetCursor(SECOND,LINE_START);
	LCD_writestring("DEC:");
	while(digit!='c')
     6be:	03 36       	cpi	r16, 0x63	; 99
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <Conv_From_Bin_To_Dec+0xea>
     6c2:	af cf       	rjmp	.-162    	; 0x622 <Conv_From_Bin_To_Dec+0x48>
			LCD_writechar(digit);
			bin[i]=digit;
			i--;
		}
	}
}
     6c4:	2c 96       	adiw	r28, 0x0c	; 12
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	08 95       	ret

000006da <Conv_From_Bin_To_Hex>:
void Conv_From_Bin_To_Hex(void)
{
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	2c 97       	sbiw	r28, 0x0c	; 12
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
	u8 digit=0,bin[12]={0};
     6f2:	fe 01       	movw	r30, r28
     6f4:	31 96       	adiw	r30, 0x01	; 1
     6f6:	8c e0       	ldi	r24, 0x0C	; 12
     6f8:	df 01       	movw	r26, r30
     6fa:	1d 92       	st	X+, r1
     6fc:	8a 95       	dec	r24
     6fe:	e9 f7       	brne	.-6      	; 0x6fa <Conv_From_Bin_To_Hex+0x20>
	s8 i=11;
	LCD_Clear();
     700:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD_Clear>
	LCD_writestring("BIN:");
     704:	81 e9       	ldi	r24, 0x91	; 145
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	LCD_SetCursor(SECOND,LINE_START);
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
	LCD_writestring("HEX:");
     714:	8f e7       	ldi	r24, 0x7F	; 127
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	}
}
void Conv_From_Bin_To_Hex(void)
{
	u8 digit=0,bin[12]={0};
	s8 i=11;
     71c:	1b e0       	ldi	r17, 0x0B	; 11
		}
	}
}
void Conv_From_Bin_To_Hex(void)
{
	u8 digit=0,bin[12]={0};
     71e:	00 e0       	ldi	r16, 0x00	; 0
	s8 i=11;
	LCD_Clear();
	LCD_writestring("BIN:");
	LCD_SetCursor(SECOND,LINE_START);
	LCD_writestring("HEX:");
	while(digit!='c')
     720:	4b c0       	rjmp	.+150    	; 0x7b8 <Conv_From_Bin_To_Hex+0xde>
	{
		digit=keypad_getnumber();
     722:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <keypad_getnumber>
     726:	08 2f       	mov	r16, r24
		
		if(digit=='=')
     728:	8d 33       	cpi	r24, 0x3D	; 61
     72a:	e9 f4       	brne	.+58     	; 0x766 <Conv_From_Bin_To_Hex+0x8c>
		{
			i++;
     72c:	1f 5f       	subi	r17, 0xFF	; 255
			LCD_SetCursor(SECOND,LENGTH);
     72e:	64 e0       	ldi	r22, 0x04	; 4
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
			number_conv_write_HEX(Bin_to_Dec(bin,i));
     736:	61 2f       	mov	r22, r17
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Bin_to_Dec>
     740:	0e 94 63 00 	call	0xc6	; 0xc6 <number_conv_write_HEX>
			for(i=0;i<12;i++)
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	0a c0       	rjmp	.+20     	; 0x75c <Conv_From_Bin_To_Hex+0x82>
			{
				bin[i]=0;
     748:	e1 e0       	ldi	r30, 0x01	; 1
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	ec 0f       	add	r30, r28
     74e:	fd 1f       	adc	r31, r29
     750:	e6 0f       	add	r30, r22
     752:	f1 1d       	adc	r31, r1
     754:	67 fd       	sbrc	r22, 7
     756:	fa 95       	dec	r31
     758:	10 82       	st	Z, r1
		if(digit=='=')
		{
			i++;
			LCD_SetCursor(SECOND,LENGTH);
			number_conv_write_HEX(Bin_to_Dec(bin,i));
			for(i=0;i<12;i++)
     75a:	6f 5f       	subi	r22, 0xFF	; 255
     75c:	6c 30       	cpi	r22, 0x0C	; 12
     75e:	a4 f3       	brlt	.-24     	; 0x748 <Conv_From_Bin_To_Hex+0x6e>
			{
				bin[i]=0;
			}
			i--;
     760:	1f ef       	ldi	r17, 0xFF	; 255
     762:	16 0f       	add	r17, r22
     764:	29 c0       	rjmp	.+82     	; 0x7b8 <Conv_From_Bin_To_Hex+0xde>
		}
		else if((digit=='0' || digit=='1')&&i>=0)//3 is least index in bin array
     766:	80 ed       	ldi	r24, 0xD0	; 208
     768:	80 0f       	add	r24, r16
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	28 f5       	brcc	.+74     	; 0x7b8 <Conv_From_Bin_To_Hex+0xde>
     76e:	11 23       	and	r17, r17
     770:	1c f1       	brlt	.+70     	; 0x7b8 <Conv_From_Bin_To_Hex+0xde>
		{
			if(i==11)
     772:	1b 30       	cpi	r17, 0x0B	; 11
     774:	a1 f4       	brne	.+40     	; 0x79e <Conv_From_Bin_To_Hex+0xc4>
			{
				LCD_SetCursor(FIRST,LENGTH);
     776:	64 e0       	ldi	r22, 0x04	; 4
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
				LCD_writestring("            ");
     77e:	84 e8       	ldi	r24, 0x84	; 132
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
				LCD_SetCursor(SECOND,LENGTH);
     786:	64 e0       	ldi	r22, 0x04	; 4
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
				LCD_writestring("            ");
     78e:	84 e8       	ldi	r24, 0x84	; 132
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
				LCD_SetCursor(FIRST,LENGTH);
     796:	64 e0       	ldi	r22, 0x04	; 4
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
			}
			LCD_writechar(digit);
     79e:	80 2f       	mov	r24, r16
     7a0:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_writechar>
			bin[i]=digit;
     7a4:	e1 e0       	ldi	r30, 0x01	; 1
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	ec 0f       	add	r30, r28
     7aa:	fd 1f       	adc	r31, r29
     7ac:	e1 0f       	add	r30, r17
     7ae:	f1 1d       	adc	r31, r1
     7b0:	17 fd       	sbrc	r17, 7
     7b2:	fa 95       	dec	r31
     7b4:	00 83       	st	Z, r16
			i--;
     7b6:	11 50       	subi	r17, 0x01	; 1
	s8 i=11;
	LCD_Clear();
	LCD_writestring("BIN:");
	LCD_SetCursor(SECOND,LINE_START);
	LCD_writestring("HEX:");
	while(digit!='c')
     7b8:	03 36       	cpi	r16, 0x63	; 99
     7ba:	09 f0       	breq	.+2      	; 0x7be <Conv_From_Bin_To_Hex+0xe4>
     7bc:	b2 cf       	rjmp	.-156    	; 0x722 <Conv_From_Bin_To_Hex+0x48>
			LCD_writechar(digit);
			bin[i]=digit;
			i--;
		}
	}
}
     7be:	2c 96       	adiw	r28, 0x0c	; 12
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	08 95       	ret

000007d4 <Get_Operation>:
}

void Get_Operation(num_conv_op_type num)
{
	num_conv_op_type flag='0';
	switch(num)
     7d4:	82 33       	cpi	r24, 0x32	; 50
     7d6:	21 f1       	breq	.+72     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     7d8:	83 33       	cpi	r24, 0x33	; 51
     7da:	09 f4       	brne	.+2      	; 0x7de <Get_Operation+0xa>
     7dc:	3f c0       	rjmp	.+126    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     7de:	81 33       	cpi	r24, 0x31	; 49
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <Get_Operation+0x10>
     7e2:	59 c0       	rjmp	.+178    	; 0x896 <__stack+0x37>
	{
		case DEC:
		LCD_writestring("DEC FOR");
     7e4:	86 e9       	ldi	r24, 0x96	; 150
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
		LCD_SetCursor(SECOND,LINE_START);
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
		LCD_writestring("1.HEX 2.BIN");
     7f4:	8e e9       	ldi	r24, 0x9E	; 158
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	_delay_ms(1000);
}

void Get_Operation(num_conv_op_type num)
{
	num_conv_op_type flag='0';
     7fc:	80 e3       	ldi	r24, 0x30	; 48
	{
		case DEC:
		LCD_writestring("DEC FOR");
		LCD_SetCursor(SECOND,LINE_START);
		LCD_writestring("1.HEX 2.BIN");
		while(flag=='0' || flag>MIN_OPERATION_NUM)
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		{
			flag=keypad_getnumber();
     800:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <keypad_getnumber>
	{
		case DEC:
		LCD_writestring("DEC FOR");
		LCD_SetCursor(SECOND,LINE_START);
		LCD_writestring("1.HEX 2.BIN");
		while(flag=='0' || flag>MIN_OPERATION_NUM)
     804:	80 33       	cpi	r24, 0x30	; 48
     806:	e1 f3       	breq	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
     808:	83 33       	cpi	r24, 0x33	; 51
     80a:	d0 f7       	brcc	.-12     	; 0x800 <__DATA_REGION_LENGTH__>
		{
			flag=keypad_getnumber();
		}
		if(flag=='1')
     80c:	81 33       	cpi	r24, 0x31	; 49
     80e:	19 f4       	brne	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		{
			Conv_From_Dec_To_Hex();
     810:	0e 94 92 00 	call	0x124	; 0x124 <Conv_From_Dec_To_Hex>
     814:	08 95       	ret
		}
		else if(flag=='2')
     816:	82 33       	cpi	r24, 0x32	; 50
     818:	f1 f5       	brne	.+124    	; 0x896 <__stack+0x37>
		{
			Conv_From_Dec_To_Bin();
     81a:	0e 94 1d 01 	call	0x23a	; 0x23a <Conv_From_Dec_To_Bin>
     81e:	08 95       	ret
		}
		break;
		case HEX:
		LCD_writestring("HEX FOR");
     820:	8a ea       	ldi	r24, 0xAA	; 170
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
		LCD_SetCursor(SECOND,LINE_START);
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
		LCD_writestring("1.DEC 2.BIN");
     830:	82 eb       	ldi	r24, 0xB2	; 178
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	_delay_ms(1000);
}

void Get_Operation(num_conv_op_type num)
{
	num_conv_op_type flag='0';
     838:	80 e3       	ldi	r24, 0x30	; 48
		break;
		case HEX:
		LCD_writestring("HEX FOR");
		LCD_SetCursor(SECOND,LINE_START);
		LCD_writestring("1.DEC 2.BIN");
		while(flag=='0' || flag>MIN_OPERATION_NUM)
     83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		{
			flag=keypad_getnumber();
     83c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <keypad_getnumber>
		break;
		case HEX:
		LCD_writestring("HEX FOR");
		LCD_SetCursor(SECOND,LINE_START);
		LCD_writestring("1.DEC 2.BIN");
		while(flag=='0' || flag>MIN_OPERATION_NUM)
     840:	80 33       	cpi	r24, 0x30	; 48
     842:	e1 f3       	breq	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     844:	83 33       	cpi	r24, 0x33	; 51
     846:	d0 f7       	brcc	.-12     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
		{
			flag=keypad_getnumber();
		}
		if(flag=='1')
     848:	81 33       	cpi	r24, 0x31	; 49
     84a:	19 f4       	brne	.+6      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
		{
			Conv_From_Hex_To_Dec();
     84c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Conv_From_Hex_To_Dec>
     850:	08 95       	ret
		}
		else if(flag=='2')
     852:	82 33       	cpi	r24, 0x32	; 50
     854:	01 f5       	brne	.+64     	; 0x896 <__stack+0x37>
		{
			Conv_From_Hex_To_Bin();
     856:	0e 94 55 02 	call	0x4aa	; 0x4aa <Conv_From_Hex_To_Bin>
     85a:	08 95       	ret
		}
		break;
		case BIN:
		LCD_writestring("BIN FOR");
     85c:	8e eb       	ldi	r24, 0xBE	; 190
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
		LCD_SetCursor(SECOND,LINE_START);
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
		LCD_writestring("1.DEC 2.HEX");
     86c:	86 ec       	ldi	r24, 0xC6	; 198
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	_delay_ms(1000);
}

void Get_Operation(num_conv_op_type num)
{
	num_conv_op_type flag='0';
     874:	80 e3       	ldi	r24, 0x30	; 48
		break;
		case BIN:
		LCD_writestring("BIN FOR");
		LCD_SetCursor(SECOND,LINE_START);
		LCD_writestring("1.DEC 2.HEX");
		while(flag=='0' || flag>MIN_OPERATION_NUM)
     876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
		{
			flag=keypad_getnumber();
     878:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <keypad_getnumber>
		break;
		case BIN:
		LCD_writestring("BIN FOR");
		LCD_SetCursor(SECOND,LINE_START);
		LCD_writestring("1.DEC 2.HEX");
		while(flag=='0' || flag>MIN_OPERATION_NUM)
     87c:	80 33       	cpi	r24, 0x30	; 48
     87e:	e1 f3       	breq	.-8      	; 0x878 <__stack+0x19>
     880:	83 33       	cpi	r24, 0x33	; 51
     882:	d0 f7       	brcc	.-12     	; 0x878 <__stack+0x19>
		{
			flag=keypad_getnumber();
		}
		if(flag=='1')
     884:	81 33       	cpi	r24, 0x31	; 49
     886:	19 f4       	brne	.+6      	; 0x88e <__stack+0x2f>
		{
			Conv_From_Bin_To_Dec();
     888:	0e 94 ed 02 	call	0x5da	; 0x5da <Conv_From_Bin_To_Dec>
     88c:	08 95       	ret
		}
		else if(flag=='2')
     88e:	82 33       	cpi	r24, 0x32	; 50
     890:	11 f4       	brne	.+4      	; 0x896 <__stack+0x37>
		{
			Conv_From_Bin_To_Hex();
     892:	0e 94 6d 03 	call	0x6da	; 0x6da <Conv_From_Bin_To_Hex>
     896:	08 95       	ret

00000898 <keypad_init>:
extern const u8 KeypadCols[];
extern const u8 KeypadRows[];
extern const u8 keypadChar[][COLUMNS];

void keypad_init(void)
{
     898:	cf 93       	push	r28
	for(u8 i=0;i<ROWS;i++)
     89a:	c0 e0       	ldi	r28, 0x00	; 0
     89c:	09 c0       	rjmp	.+18     	; 0x8b0 <keypad_init+0x18>
	{
		DIO_WritePin(KeypadRows[i],HIGH);
     89e:	ec 2f       	mov	r30, r28
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	ee 5f       	subi	r30, 0xFE	; 254
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	80 81       	ld	r24, Z
     8aa:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
extern const u8 KeypadRows[];
extern const u8 keypadChar[][COLUMNS];

void keypad_init(void)
{
	for(u8 i=0;i<ROWS;i++)
     8ae:	cf 5f       	subi	r28, 0xFF	; 255
     8b0:	c4 30       	cpi	r28, 0x04	; 4
     8b2:	a8 f3       	brcs	.-22     	; 0x89e <keypad_init+0x6>
	{
		DIO_WritePin(KeypadRows[i],HIGH);
	}
}
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <keypad_getnumber>:
u8 keypad_getnumber(void)
{
     8b8:	bf 92       	push	r11
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
	u8 i,j,character=NO_KEY;
     8ca:	0f 2e       	mov	r0, r31
     8cc:	f2 e5       	ldi	r31, 0x52	; 82
     8ce:	bf 2e       	mov	r11, r31
     8d0:	f0 2d       	mov	r31, r0
	for(i=0;i<ROWS;i++)
     8d2:	d1 2c       	mov	r13, r1
     8d4:	2f c0       	rjmp	.+94     	; 0x934 <keypad_getnumber+0x7c>
	{
		DIO_WritePin(KeypadRows[i],LOW);
     8d6:	ed 2c       	mov	r14, r13
     8d8:	f1 2c       	mov	r15, r1
     8da:	f7 01       	movw	r30, r14
     8dc:	ee 5f       	subi	r30, 0xFE	; 254
     8de:	fe 4f       	sbci	r31, 0xFE	; 254
     8e0:	c0 80       	ld	r12, Z
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	8c 2d       	mov	r24, r12
     8e6:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
		for(j=0;j<COLUMNS;j++)
     8ea:	d0 e0       	ldi	r29, 0x00	; 0
     8ec:	1c c0       	rjmp	.+56     	; 0x926 <keypad_getnumber+0x6e>
		{
			if(DIO_ReadPin(KeypadCols[j])==LOW)
     8ee:	0d 2f       	mov	r16, r29
     8f0:	10 e0       	ldi	r17, 0x00	; 0
     8f2:	f8 01       	movw	r30, r16
     8f4:	ea 5f       	subi	r30, 0xFA	; 250
     8f6:	fe 4f       	sbci	r31, 0xFE	; 254
     8f8:	c0 81       	ld	r28, Z
     8fa:	8c 2f       	mov	r24, r28
     8fc:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_ReadPin>
     900:	81 11       	cpse	r24, r1
     902:	10 c0       	rjmp	.+32     	; 0x924 <keypad_getnumber+0x6c>
			{
				character=keypadChar[i][j];
     904:	c7 01       	movw	r24, r14
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	8e 50       	subi	r24, 0x0E	; 14
     910:	9f 4f       	sbci	r25, 0xFF	; 255
     912:	fc 01       	movw	r30, r24
     914:	e0 0f       	add	r30, r16
     916:	f1 1f       	adc	r31, r17
     918:	b0 80       	ld	r11, Z
				while(DIO_ReadPin(KeypadCols[j])==LOW);
     91a:	8c 2f       	mov	r24, r28
     91c:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_ReadPin>
     920:	88 23       	and	r24, r24
     922:	d9 f3       	breq	.-10     	; 0x91a <keypad_getnumber+0x62>
{
	u8 i,j,character=NO_KEY;
	for(i=0;i<ROWS;i++)
	{
		DIO_WritePin(KeypadRows[i],LOW);
		for(j=0;j<COLUMNS;j++)
     924:	df 5f       	subi	r29, 0xFF	; 255
     926:	d4 30       	cpi	r29, 0x04	; 4
     928:	10 f3       	brcs	.-60     	; 0x8ee <keypad_getnumber+0x36>
			{
				character=keypadChar[i][j];
				while(DIO_ReadPin(KeypadCols[j])==LOW);
			}
		}
		DIO_WritePin(KeypadRows[i],HIGH);
     92a:	61 e0       	ldi	r22, 0x01	; 1
     92c:	8c 2d       	mov	r24, r12
     92e:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
	}
}
u8 keypad_getnumber(void)
{
	u8 i,j,character=NO_KEY;
	for(i=0;i<ROWS;i++)
     932:	d3 94       	inc	r13
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	8d 15       	cp	r24, r13
     938:	70 f6       	brcc	.-100    	; 0x8d6 <keypad_getnumber+0x1e>
			}
		}
		DIO_WritePin(KeypadRows[i],HIGH);
	}
	return character;
}
     93a:	8b 2d       	mov	r24, r11
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	ef 90       	pop	r14
     948:	df 90       	pop	r13
     94a:	cf 90       	pop	r12
     94c:	bf 90       	pop	r11
     94e:	08 95       	ret

00000950 <Write_ins>:
{
	for(s8 i=7;i>=0;i--)
	{
		LCD_writechar(READ_BIT(num,i)+'0');
	}
}
     950:	cf 93       	push	r28
     952:	c8 2f       	mov	r28, r24
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     95c:	c4 fb       	bst	r28, 4
     95e:	66 27       	eor	r22, r22
     960:	60 f9       	bld	r22, 0
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     968:	c5 fb       	bst	r28, 5
     96a:	66 27       	eor	r22, r22
     96c:	60 f9       	bld	r22, 0
     96e:	84 e0       	ldi	r24, 0x04	; 4
     970:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     974:	c6 fb       	bst	r28, 6
     976:	66 27       	eor	r22, r22
     978:	60 f9       	bld	r22, 0
     97a:	85 e0       	ldi	r24, 0x05	; 5
     97c:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     980:	6c 2f       	mov	r22, r28
     982:	66 1f       	adc	r22, r22
     984:	66 27       	eor	r22, r22
     986:	66 1f       	adc	r22, r22
     988:	86 e0       	ldi	r24, 0x06	; 6
     98a:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	82 e0       	ldi	r24, 0x02	; 2
     992:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     996:	8f ec       	ldi	r24, 0xCF	; 207
     998:	97 e0       	ldi	r25, 0x07	; 7
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	f1 f7       	brne	.-4      	; 0x99a <Write_ins+0x4a>
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <Write_ins+0x50>
     9a0:	00 00       	nop
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     9aa:	8f ec       	ldi	r24, 0xCF	; 207
     9ac:	97 e0       	ldi	r25, 0x07	; 7
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	f1 f7       	brne	.-4      	; 0x9ae <Write_ins+0x5e>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <Write_ins+0x64>
     9b4:	00 00       	nop
     9b6:	6c 2f       	mov	r22, r28
     9b8:	61 70       	andi	r22, 0x01	; 1
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     9c0:	c1 fb       	bst	r28, 1
     9c2:	66 27       	eor	r22, r22
     9c4:	60 f9       	bld	r22, 0
     9c6:	84 e0       	ldi	r24, 0x04	; 4
     9c8:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     9cc:	c2 fb       	bst	r28, 2
     9ce:	66 27       	eor	r22, r22
     9d0:	60 f9       	bld	r22, 0
     9d2:	85 e0       	ldi	r24, 0x05	; 5
     9d4:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     9d8:	c3 fb       	bst	r28, 3
     9da:	66 27       	eor	r22, r22
     9dc:	60 f9       	bld	r22, 0
     9de:	86 e0       	ldi	r24, 0x06	; 6
     9e0:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     9ec:	8f ec       	ldi	r24, 0xCF	; 207
     9ee:	97 e0       	ldi	r25, 0x07	; 7
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <Write_ins+0xa0>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <Write_ins+0xa6>
     9f6:	00 00       	nop
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     a00:	8f ec       	ldi	r24, 0xCF	; 207
     a02:	97 e0       	ldi	r25, 0x07	; 7
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <Write_ins+0xb4>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <Write_ins+0xba>
     a0a:	00 00       	nop
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <write_data>:
     a10:	cf 93       	push	r28
     a12:	c8 2f       	mov	r28, r24
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     a1c:	c4 fb       	bst	r28, 4
     a1e:	66 27       	eor	r22, r22
     a20:	60 f9       	bld	r22, 0
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     a28:	c5 fb       	bst	r28, 5
     a2a:	66 27       	eor	r22, r22
     a2c:	60 f9       	bld	r22, 0
     a2e:	84 e0       	ldi	r24, 0x04	; 4
     a30:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     a34:	c6 fb       	bst	r28, 6
     a36:	66 27       	eor	r22, r22
     a38:	60 f9       	bld	r22, 0
     a3a:	85 e0       	ldi	r24, 0x05	; 5
     a3c:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     a40:	6c 2f       	mov	r22, r28
     a42:	66 1f       	adc	r22, r22
     a44:	66 27       	eor	r22, r22
     a46:	66 1f       	adc	r22, r22
     a48:	86 e0       	ldi	r24, 0x06	; 6
     a4a:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     a56:	8f ec       	ldi	r24, 0xCF	; 207
     a58:	97 e0       	ldi	r25, 0x07	; 7
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	f1 f7       	brne	.-4      	; 0xa5a <write_data+0x4a>
     a5e:	00 c0       	rjmp	.+0      	; 0xa60 <write_data+0x50>
     a60:	00 00       	nop
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     a6a:	8f ec       	ldi	r24, 0xCF	; 207
     a6c:	97 e0       	ldi	r25, 0x07	; 7
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <write_data+0x5e>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <write_data+0x64>
     a74:	00 00       	nop
     a76:	6c 2f       	mov	r22, r28
     a78:	61 70       	andi	r22, 0x01	; 1
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     a80:	c1 fb       	bst	r28, 1
     a82:	66 27       	eor	r22, r22
     a84:	60 f9       	bld	r22, 0
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     a8c:	c2 fb       	bst	r28, 2
     a8e:	66 27       	eor	r22, r22
     a90:	60 f9       	bld	r22, 0
     a92:	85 e0       	ldi	r24, 0x05	; 5
     a94:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     a98:	c3 fb       	bst	r28, 3
     a9a:	66 27       	eor	r22, r22
     a9c:	60 f9       	bld	r22, 0
     a9e:	86 e0       	ldi	r24, 0x06	; 6
     aa0:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     aac:	8f ec       	ldi	r24, 0xCF	; 207
     aae:	97 e0       	ldi	r25, 0x07	; 7
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <write_data+0xa0>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <write_data+0xa6>
     ab6:	00 00       	nop
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_WritePin>
     ac0:	8f ec       	ldi	r24, 0xCF	; 207
     ac2:	97 e0       	ldi	r25, 0x07	; 7
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <write_data+0xb4>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <write_data+0xba>
     aca:	00 00       	nop
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <LCD_init>:
     ad0:	2f ef       	ldi	r18, 0xFF	; 255
     ad2:	89 ef       	ldi	r24, 0xF9	; 249
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	21 50       	subi	r18, 0x01	; 1
     ad8:	80 40       	sbci	r24, 0x00	; 0
     ada:	90 40       	sbci	r25, 0x00	; 0
     adc:	e1 f7       	brne	.-8      	; 0xad6 <LCD_init+0x6>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <LCD_init+0x10>
     ae0:	00 00       	nop
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	0e 94 a8 04 	call	0x950	; 0x950 <Write_ins>
     ae8:	88 e2       	ldi	r24, 0x28	; 40
     aea:	0e 94 a8 04 	call	0x950	; 0x950 <Write_ins>
     aee:	8c e0       	ldi	r24, 0x0C	; 12
     af0:	0e 94 a8 04 	call	0x950	; 0x950 <Write_ins>
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	0e 94 a8 04 	call	0x950	; 0x950 <Write_ins>
     afa:	8f ec       	ldi	r24, 0xCF	; 207
     afc:	97 e0       	ldi	r25, 0x07	; 7
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <LCD_init+0x2e>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <LCD_init+0x34>
     b04:	00 00       	nop
     b06:	86 e0       	ldi	r24, 0x06	; 6
     b08:	0e 94 a8 04 	call	0x950	; 0x950 <Write_ins>
     b0c:	08 95       	ret

00000b0e <LCD_writechar>:
     b0e:	0e 94 08 05 	call	0xa10	; 0xa10 <write_data>
     b12:	08 95       	ret

00000b14 <LCD_writestring>:
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	8c 01       	movw	r16, r24
     b1e:	c0 e0       	ldi	r28, 0x00	; 0
     b20:	d0 e0       	ldi	r29, 0x00	; 0
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <LCD_writestring+0x16>
     b24:	0e 94 08 05 	call	0xa10	; 0xa10 <write_data>
     b28:	21 96       	adiw	r28, 0x01	; 1
     b2a:	f8 01       	movw	r30, r16
     b2c:	ec 0f       	add	r30, r28
     b2e:	fd 1f       	adc	r31, r29
     b30:	80 81       	ld	r24, Z
     b32:	81 11       	cpse	r24, r1
     b34:	f7 cf       	rjmp	.-18     	; 0xb24 <LCD_writestring+0x10>
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	08 95       	ret

00000b40 <LCD_writeNumber>:
     b40:	8f 92       	push	r8
     b42:	9f 92       	push	r9
     b44:	af 92       	push	r10
     b46:	bf 92       	push	r11
     b48:	cf 92       	push	r12
     b4a:	df 92       	push	r13
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	cf 93       	push	r28
     b52:	4b 01       	movw	r8, r22
     b54:	5c 01       	movw	r10, r24
     b56:	67 2b       	or	r22, r23
     b58:	68 2b       	or	r22, r24
     b5a:	69 2b       	or	r22, r25
     b5c:	19 f4       	brne	.+6      	; 0xb64 <LCD_writeNumber+0x24>
     b5e:	80 e3       	ldi	r24, 0x30	; 48
     b60:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_writechar>
     b64:	bb 20       	and	r11, r11
     b66:	5c f4       	brge	.+22     	; 0xb7e <LCD_writeNumber+0x3e>
     b68:	b0 94       	com	r11
     b6a:	a0 94       	com	r10
     b6c:	90 94       	com	r9
     b6e:	80 94       	com	r8
     b70:	81 1c       	adc	r8, r1
     b72:	91 1c       	adc	r9, r1
     b74:	a1 1c       	adc	r10, r1
     b76:	b1 1c       	adc	r11, r1
     b78:	8d e2       	ldi	r24, 0x2D	; 45
     b7a:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_writechar>
     b7e:	c0 e0       	ldi	r28, 0x00	; 0
     b80:	c1 2c       	mov	r12, r1
     b82:	d1 2c       	mov	r13, r1
     b84:	76 01       	movw	r14, r12
     b86:	32 c0       	rjmp	.+100    	; 0xbec <LCD_writeNumber+0xac>
     b88:	cc 0c       	add	r12, r12
     b8a:	dd 1c       	adc	r13, r13
     b8c:	ee 1c       	adc	r14, r14
     b8e:	ff 1c       	adc	r15, r15
     b90:	d7 01       	movw	r26, r14
     b92:	c6 01       	movw	r24, r12
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	aa 1f       	adc	r26, r26
     b9a:	bb 1f       	adc	r27, r27
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	aa 1f       	adc	r26, r26
     ba2:	bb 1f       	adc	r27, r27
     ba4:	c8 0e       	add	r12, r24
     ba6:	d9 1e       	adc	r13, r25
     ba8:	ea 1e       	adc	r14, r26
     baa:	fb 1e       	adc	r15, r27
     bac:	c5 01       	movw	r24, r10
     bae:	b4 01       	movw	r22, r8
     bb0:	2a e0       	ldi	r18, 0x0A	; 10
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	0e 94 89 08 	call	0x1112	; 0x1112 <__divmodsi4>
     bbc:	c6 0e       	add	r12, r22
     bbe:	d7 1e       	adc	r13, r23
     bc0:	e8 1e       	adc	r14, r24
     bc2:	f9 1e       	adc	r15, r25
     bc4:	67 2b       	or	r22, r23
     bc6:	68 2b       	or	r22, r24
     bc8:	69 2b       	or	r22, r25
     bca:	31 f4       	brne	.+12     	; 0xbd8 <LCD_writeNumber+0x98>
     bcc:	c1 14       	cp	r12, r1
     bce:	d1 04       	cpc	r13, r1
     bd0:	e1 04       	cpc	r14, r1
     bd2:	f1 04       	cpc	r15, r1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <LCD_writeNumber+0x98>
     bd6:	cf 5f       	subi	r28, 0xFF	; 255
     bd8:	c5 01       	movw	r24, r10
     bda:	b4 01       	movw	r22, r8
     bdc:	2a e0       	ldi	r18, 0x0A	; 10
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	0e 94 89 08 	call	0x1112	; 0x1112 <__divmodsi4>
     be8:	49 01       	movw	r8, r18
     bea:	5a 01       	movw	r10, r20
     bec:	81 14       	cp	r8, r1
     bee:	91 04       	cpc	r9, r1
     bf0:	a1 04       	cpc	r10, r1
     bf2:	b1 04       	cpc	r11, r1
     bf4:	49 f6       	brne	.-110    	; 0xb88 <LCD_writeNumber+0x48>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <LCD_writeNumber+0xe0>
     bf8:	c7 01       	movw	r24, r14
     bfa:	b6 01       	movw	r22, r12
     bfc:	2a e0       	ldi	r18, 0x0A	; 10
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	0e 94 67 08 	call	0x10ce	; 0x10ce <__udivmodsi4>
     c08:	82 2e       	mov	r8, r18
     c0a:	93 2e       	mov	r9, r19
     c0c:	a4 2e       	mov	r10, r20
     c0e:	b5 2e       	mov	r11, r21
     c10:	80 e3       	ldi	r24, 0x30	; 48
     c12:	86 0f       	add	r24, r22
     c14:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_writechar>
     c18:	c8 2c       	mov	r12, r8
     c1a:	d9 2c       	mov	r13, r9
     c1c:	ea 2c       	mov	r14, r10
     c1e:	fb 2c       	mov	r15, r11
     c20:	c1 14       	cp	r12, r1
     c22:	d1 04       	cpc	r13, r1
     c24:	e1 04       	cpc	r14, r1
     c26:	f1 04       	cpc	r15, r1
     c28:	39 f7       	brne	.-50     	; 0xbf8 <LCD_writeNumber+0xb8>
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <LCD_writeNumber+0xf4>
     c2c:	80 e3       	ldi	r24, 0x30	; 48
     c2e:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_writechar>
     c32:	c1 50       	subi	r28, 0x01	; 1
     c34:	c1 11       	cpse	r28, r1
     c36:	fa cf       	rjmp	.-12     	; 0xc2c <LCD_writeNumber+0xec>
     c38:	cf 91       	pop	r28
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	bf 90       	pop	r11
     c44:	af 90       	pop	r10
     c46:	9f 90       	pop	r9
     c48:	8f 90       	pop	r8
     c4a:	08 95       	ret

00000c4c <LCD_WriteHex>:
void LCD_WriteHex(u8 num)
{
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	00 d0       	rcall	.+0      	; 0xc56 <LCD_WriteHex+0xa>
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
	u8 hex[2];
	for(int i=1;i>=0;i--)
     c5a:	21 e0       	ldi	r18, 0x01	; 1
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	0d c0       	rjmp	.+26     	; 0xc7a <LCD_WriteHex+0x2e>
	{
		hex[i]=num%16;
     c60:	e1 e0       	ldi	r30, 0x01	; 1
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	ec 0f       	add	r30, r28
     c66:	fd 1f       	adc	r31, r29
     c68:	e2 0f       	add	r30, r18
     c6a:	f3 1f       	adc	r31, r19
     c6c:	98 2f       	mov	r25, r24
     c6e:	9f 70       	andi	r25, 0x0F	; 15
     c70:	90 83       	st	Z, r25
		num/=16;
     c72:	82 95       	swap	r24
     c74:	8f 70       	andi	r24, 0x0F	; 15
	}
}
void LCD_WriteHex(u8 num)
{
	u8 hex[2];
	for(int i=1;i>=0;i--)
     c76:	21 50       	subi	r18, 0x01	; 1
     c78:	31 09       	sbc	r19, r1
     c7a:	33 23       	and	r19, r19
     c7c:	8c f7       	brge	.-30     	; 0xc60 <LCD_WriteHex+0x14>
     c7e:	00 e0       	ldi	r16, 0x00	; 0
     c80:	10 e0       	ldi	r17, 0x00	; 0
     c82:	12 c0       	rjmp	.+36     	; 0xca8 <LCD_WriteHex+0x5c>
		hex[i]=num%16;
		num/=16;
	}
	for(int i=0;i<2;i++)
	{
		if(hex[i]>9)
     c84:	e1 e0       	ldi	r30, 0x01	; 1
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	ec 0f       	add	r30, r28
     c8a:	fd 1f       	adc	r31, r29
     c8c:	e0 0f       	add	r30, r16
     c8e:	f1 1f       	adc	r31, r17
     c90:	80 81       	ld	r24, Z
     c92:	8a 30       	cpi	r24, 0x0A	; 10
     c94:	20 f0       	brcs	.+8      	; 0xc9e <LCD_WriteHex+0x52>
		{
			LCD_writechar(hex[i]-10+'A');
     c96:	89 5c       	subi	r24, 0xC9	; 201
     c98:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_writechar>
     c9c:	03 c0       	rjmp	.+6      	; 0xca4 <LCD_WriteHex+0x58>
		}
		else
		{
			LCD_writechar(hex[i]+'0');
     c9e:	80 5d       	subi	r24, 0xD0	; 208
     ca0:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_writechar>
	for(int i=1;i>=0;i--)
	{
		hex[i]=num%16;
		num/=16;
	}
	for(int i=0;i<2;i++)
     ca4:	0f 5f       	subi	r16, 0xFF	; 255
     ca6:	1f 4f       	sbci	r17, 0xFF	; 255
     ca8:	02 30       	cpi	r16, 0x02	; 2
     caa:	11 05       	cpc	r17, r1
     cac:	5c f3       	brlt	.-42     	; 0xc84 <LCD_WriteHex+0x38>
		else
		{
			LCD_writechar(hex[i]+'0');
		}
	}
}
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	08 95       	ret

00000cbc <LCD_SetCursor>:
void LCD_SetCursor(LCD_line_type line,u8 cell)
{
	if(line==FIRST)
     cbc:	81 11       	cpse	r24, r1
     cbe:	05 c0       	rjmp	.+10     	; 0xcca <LCD_SetCursor+0xe>
	{
		Write_ins(0x80|cell);
     cc0:	86 2f       	mov	r24, r22
     cc2:	80 68       	ori	r24, 0x80	; 128
     cc4:	0e 94 a8 04 	call	0x950	; 0x950 <Write_ins>
     cc8:	08 95       	ret
	}
	else if(line==SECOND)
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <LCD_SetCursor+0x1a>
	{
		Write_ins(0xc0|cell);
     cce:	86 2f       	mov	r24, r22
     cd0:	80 6c       	ori	r24, 0xC0	; 192
     cd2:	0e 94 a8 04 	call	0x950	; 0x950 <Write_ins>
     cd6:	08 95       	ret

00000cd8 <LCD_Clear>:
	}
}
void LCD_Clear(void)
{
	Write_ins(1);
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	0e 94 a8 04 	call	0x950	; 0x950 <Write_ins>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cde:	8f ec       	ldi	r24, 0xCF	; 207
     ce0:	97 e0       	ldi	r25, 0x07	; 7
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <LCD_Clear+0xa>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <LCD_Clear+0x10>
     ce8:	00 00       	nop
     cea:	08 95       	ret

00000cec <main>:



int main(void)
{
	DIO_Init();
     cec:	0e 94 9a 07 	call	0xf34	; 0xf34 <DIO_Init>
	LCD_init();
     cf0:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD_init>
	keypad_init();
     cf4:	0e 94 4c 04 	call	0x898	; 0x898 <keypad_init>
	number_conv_init();
     cf8:	0e 94 49 00 	call	0x92	; 0x92 <number_conv_init>
	u8 num=0;
	while (1)
	{
	   LCD_Clear();
     cfc:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD_Clear>
	   LCD_SetCursor(FIRST,1);
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
	   LCD_writestring("convert from");
     d08:	8a e0       	ldi	r24, 0x0A	; 10
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	   LCD_SetCursor(SECOND,0);
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_SetCursor>
	   LCD_writestring("1.DEC 2.HEX 3.BIN");
     d18:	87 e1       	ldi	r24, 0x17	; 23
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_writestring>
	   while(1)
	   {
		  num=keypad_getnumber();
     d20:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <keypad_getnumber>
     d24:	c8 2f       	mov	r28, r24
		  if(num>0 && num<=OPERATION_NUM)
     d26:	8f ef       	ldi	r24, 0xFF	; 255
     d28:	8c 0f       	add	r24, r28
     d2a:	83 33       	cpi	r24, 0x33	; 51
     d2c:	c8 f7       	brcc	.-14     	; 0xd20 <main+0x34>
		  {
			  LCD_Clear();
     d2e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD_Clear>
			  Get_Operation(num);
     d32:	8c 2f       	mov	r24, r28
     d34:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Get_Operation>
		
			  break;
		  }
	   }
	  
     }
     d38:	e1 cf       	rjmp	.-62     	; 0xcfc <main+0x10>

00000d3a <DIO_InitPin>:
	 		DIO_InitPin(i,PinsStatusArray[i]);
		}
}
void DIO_InitPin(DIO_Pin_type pin,DIO_PinStatus_type status)
{
	u8 port=pin/PORT_SIZE;
     d3a:	98 2f       	mov	r25, r24
     d3c:	96 95       	lsr	r25
     d3e:	96 95       	lsr	r25
     d40:	96 95       	lsr	r25
	u8 pin_num = pin%PORT_SIZE;
     d42:	87 70       	andi	r24, 0x07	; 7
	switch(status)
     d44:	61 30       	cpi	r22, 0x01	; 1
     d46:	09 f4       	brne	.+2      	; 0xd4a <DIO_InitPin+0x10>
     d48:	55 c0       	rjmp	.+170    	; 0xdf4 <DIO_InitPin+0xba>
     d4a:	20 f0       	brcs	.+8      	; 0xd54 <DIO_InitPin+0x1a>
     d4c:	62 30       	cpi	r22, 0x02	; 2
     d4e:	09 f4       	brne	.+2      	; 0xd52 <DIO_InitPin+0x18>
     d50:	a1 c0       	rjmp	.+322    	; 0xe94 <DIO_InitPin+0x15a>
     d52:	08 95       	ret
	{
		case OUTPUT:
		switch(port)
     d54:	91 30       	cpi	r25, 0x01	; 1
     d56:	c1 f0       	breq	.+48     	; 0xd88 <DIO_InitPin+0x4e>
     d58:	28 f0       	brcs	.+10     	; 0xd64 <DIO_InitPin+0x2a>
     d5a:	92 30       	cpi	r25, 0x02	; 2
     d5c:	39 f1       	breq	.+78     	; 0xdac <DIO_InitPin+0x72>
     d5e:	93 30       	cpi	r25, 0x03	; 3
     d60:	b9 f1       	breq	.+110    	; 0xdd0 <DIO_InitPin+0x96>
     d62:	08 95       	ret
		{
			case PA:
			SET_BIT( DDRA,pin_num);
     d64:	4a b3       	in	r20, 0x1a	; 26
     d66:	21 e0       	ldi	r18, 0x01	; 1
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	b9 01       	movw	r22, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <DIO_InitPin+0x38>
     d6e:	66 0f       	add	r22, r22
     d70:	77 1f       	adc	r23, r23
     d72:	8a 95       	dec	r24
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <DIO_InitPin+0x34>
     d76:	cb 01       	movw	r24, r22
     d78:	94 2f       	mov	r25, r20
     d7a:	98 2b       	or	r25, r24
     d7c:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,pin_num);
     d7e:	9b b3       	in	r25, 0x1b	; 27
     d80:	80 95       	com	r24
     d82:	89 23       	and	r24, r25
     d84:	8b bb       	out	0x1b, r24	; 27
			break;
     d86:	08 95       	ret
			case PB:
			SET_BIT( DDRB,pin_num);
     d88:	47 b3       	in	r20, 0x17	; 23
     d8a:	21 e0       	ldi	r18, 0x01	; 1
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	b9 01       	movw	r22, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_InitPin+0x5c>
     d92:	66 0f       	add	r22, r22
     d94:	77 1f       	adc	r23, r23
     d96:	8a 95       	dec	r24
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_InitPin+0x58>
     d9a:	cb 01       	movw	r24, r22
     d9c:	94 2f       	mov	r25, r20
     d9e:	98 2b       	or	r25, r24
     da0:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,pin_num);
     da2:	98 b3       	in	r25, 0x18	; 24
     da4:	80 95       	com	r24
     da6:	89 23       	and	r24, r25
     da8:	88 bb       	out	0x18, r24	; 24
			break;
     daa:	08 95       	ret
			case PC:
			SET_BIT( DDRC,pin_num);
     dac:	44 b3       	in	r20, 0x14	; 20
     dae:	21 e0       	ldi	r18, 0x01	; 1
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	b9 01       	movw	r22, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_InitPin+0x80>
     db6:	66 0f       	add	r22, r22
     db8:	77 1f       	adc	r23, r23
     dba:	8a 95       	dec	r24
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_InitPin+0x7c>
     dbe:	cb 01       	movw	r24, r22
     dc0:	94 2f       	mov	r25, r20
     dc2:	98 2b       	or	r25, r24
     dc4:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,pin_num);
     dc6:	95 b3       	in	r25, 0x15	; 21
     dc8:	80 95       	com	r24
     dca:	89 23       	and	r24, r25
     dcc:	85 bb       	out	0x15, r24	; 21
			break;
     dce:	08 95       	ret
			case PD:
			SET_BIT( DDRD,pin_num);
     dd0:	41 b3       	in	r20, 0x11	; 17
     dd2:	21 e0       	ldi	r18, 0x01	; 1
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	b9 01       	movw	r22, r18
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_InitPin+0xa4>
     dda:	66 0f       	add	r22, r22
     ddc:	77 1f       	adc	r23, r23
     dde:	8a 95       	dec	r24
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_InitPin+0xa0>
     de2:	cb 01       	movw	r24, r22
     de4:	94 2f       	mov	r25, r20
     de6:	98 2b       	or	r25, r24
     de8:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,pin_num);
     dea:	92 b3       	in	r25, 0x12	; 18
     dec:	80 95       	com	r24
     dee:	89 23       	and	r24, r25
     df0:	82 bb       	out	0x12, r24	; 18
			break;		
     df2:	08 95       	ret
		}
		break;
		case INFREE:
		switch(pin/8)
     df4:	91 30       	cpi	r25, 0x01	; 1
     df6:	c1 f0       	breq	.+48     	; 0xe28 <DIO_InitPin+0xee>
     df8:	28 f0       	brcs	.+10     	; 0xe04 <DIO_InitPin+0xca>
     dfa:	92 30       	cpi	r25, 0x02	; 2
     dfc:	39 f1       	breq	.+78     	; 0xe4c <DIO_InitPin+0x112>
     dfe:	93 30       	cpi	r25, 0x03	; 3
     e00:	b9 f1       	breq	.+110    	; 0xe70 <DIO_InitPin+0x136>
     e02:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
     e04:	4a b3       	in	r20, 0x1a	; 26
     e06:	21 e0       	ldi	r18, 0x01	; 1
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	b9 01       	movw	r22, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_InitPin+0xd8>
     e0e:	66 0f       	add	r22, r22
     e10:	77 1f       	adc	r23, r23
     e12:	8a 95       	dec	r24
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_InitPin+0xd4>
     e16:	cb 01       	movw	r24, r22
     e18:	80 95       	com	r24
     e1a:	94 2f       	mov	r25, r20
     e1c:	98 23       	and	r25, r24
     e1e:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,pin_num);
     e20:	9b b3       	in	r25, 0x1b	; 27
     e22:	89 23       	and	r24, r25
     e24:	8b bb       	out	0x1b, r24	; 27
			break;
     e26:	08 95       	ret
			case PB:
			CLR_BIT(DDRB,pin_num);
     e28:	47 b3       	in	r20, 0x17	; 23
     e2a:	21 e0       	ldi	r18, 0x01	; 1
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	b9 01       	movw	r22, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_InitPin+0xfc>
     e32:	66 0f       	add	r22, r22
     e34:	77 1f       	adc	r23, r23
     e36:	8a 95       	dec	r24
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_InitPin+0xf8>
     e3a:	cb 01       	movw	r24, r22
     e3c:	80 95       	com	r24
     e3e:	94 2f       	mov	r25, r20
     e40:	98 23       	and	r25, r24
     e42:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,pin_num);
     e44:	98 b3       	in	r25, 0x18	; 24
     e46:	89 23       	and	r24, r25
     e48:	88 bb       	out	0x18, r24	; 24
			break;
     e4a:	08 95       	ret
			case PC:
			CLR_BIT(DDRC,pin_num);
     e4c:	44 b3       	in	r20, 0x14	; 20
     e4e:	21 e0       	ldi	r18, 0x01	; 1
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	b9 01       	movw	r22, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_InitPin+0x120>
     e56:	66 0f       	add	r22, r22
     e58:	77 1f       	adc	r23, r23
     e5a:	8a 95       	dec	r24
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_InitPin+0x11c>
     e5e:	cb 01       	movw	r24, r22
     e60:	80 95       	com	r24
     e62:	94 2f       	mov	r25, r20
     e64:	98 23       	and	r25, r24
     e66:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,pin_num);
     e68:	95 b3       	in	r25, 0x15	; 21
     e6a:	89 23       	and	r24, r25
     e6c:	85 bb       	out	0x15, r24	; 21
			break;
     e6e:	08 95       	ret
			case PD:
			CLR_BIT(DDRD,pin_num);
     e70:	41 b3       	in	r20, 0x11	; 17
     e72:	21 e0       	ldi	r18, 0x01	; 1
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	b9 01       	movw	r22, r18
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <DIO_InitPin+0x144>
     e7a:	66 0f       	add	r22, r22
     e7c:	77 1f       	adc	r23, r23
     e7e:	8a 95       	dec	r24
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <DIO_InitPin+0x140>
     e82:	cb 01       	movw	r24, r22
     e84:	80 95       	com	r24
     e86:	94 2f       	mov	r25, r20
     e88:	98 23       	and	r25, r24
     e8a:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,pin_num);
     e8c:	92 b3       	in	r25, 0x12	; 18
     e8e:	89 23       	and	r24, r25
     e90:	82 bb       	out	0x12, r24	; 18
			break;
     e92:	08 95       	ret
		}
		break;
		
		case INPULL:
		switch(port)
     e94:	91 30       	cpi	r25, 0x01	; 1
     e96:	c1 f0       	breq	.+48     	; 0xec8 <DIO_InitPin+0x18e>
     e98:	28 f0       	brcs	.+10     	; 0xea4 <DIO_InitPin+0x16a>
     e9a:	92 30       	cpi	r25, 0x02	; 2
     e9c:	39 f1       	breq	.+78     	; 0xeec <DIO_InitPin+0x1b2>
     e9e:	93 30       	cpi	r25, 0x03	; 3
     ea0:	b9 f1       	breq	.+110    	; 0xf10 <DIO_InitPin+0x1d6>
     ea2:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
     ea4:	4a b3       	in	r20, 0x1a	; 26
     ea6:	21 e0       	ldi	r18, 0x01	; 1
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	b9 01       	movw	r22, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <DIO_InitPin+0x178>
     eae:	66 0f       	add	r22, r22
     eb0:	77 1f       	adc	r23, r23
     eb2:	8a 95       	dec	r24
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <DIO_InitPin+0x174>
     eb6:	cb 01       	movw	r24, r22
     eb8:	96 2f       	mov	r25, r22
     eba:	90 95       	com	r25
     ebc:	94 23       	and	r25, r20
     ebe:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pin_num);
     ec0:	9b b3       	in	r25, 0x1b	; 27
     ec2:	89 2b       	or	r24, r25
     ec4:	8b bb       	out	0x1b, r24	; 27
			break;
     ec6:	08 95       	ret
			case PB:
			CLR_BIT(DDRB,pin_num);
     ec8:	47 b3       	in	r20, 0x17	; 23
     eca:	21 e0       	ldi	r18, 0x01	; 1
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	b9 01       	movw	r22, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_InitPin+0x19c>
     ed2:	66 0f       	add	r22, r22
     ed4:	77 1f       	adc	r23, r23
     ed6:	8a 95       	dec	r24
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_InitPin+0x198>
     eda:	cb 01       	movw	r24, r22
     edc:	96 2f       	mov	r25, r22
     ede:	90 95       	com	r25
     ee0:	94 23       	and	r25, r20
     ee2:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pin_num);
     ee4:	98 b3       	in	r25, 0x18	; 24
     ee6:	89 2b       	or	r24, r25
     ee8:	88 bb       	out	0x18, r24	; 24
			break;
     eea:	08 95       	ret
			case PC:
			CLR_BIT(DDRC,pin_num);
     eec:	44 b3       	in	r20, 0x14	; 20
     eee:	21 e0       	ldi	r18, 0x01	; 1
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	b9 01       	movw	r22, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_InitPin+0x1c0>
     ef6:	66 0f       	add	r22, r22
     ef8:	77 1f       	adc	r23, r23
     efa:	8a 95       	dec	r24
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_InitPin+0x1bc>
     efe:	cb 01       	movw	r24, r22
     f00:	96 2f       	mov	r25, r22
     f02:	90 95       	com	r25
     f04:	94 23       	and	r25, r20
     f06:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pin_num);
     f08:	95 b3       	in	r25, 0x15	; 21
     f0a:	89 2b       	or	r24, r25
     f0c:	85 bb       	out	0x15, r24	; 21
			break;
     f0e:	08 95       	ret
			case PD:
			CLR_BIT(DDRD,pin_num);
     f10:	41 b3       	in	r20, 0x11	; 17
     f12:	21 e0       	ldi	r18, 0x01	; 1
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	b9 01       	movw	r22, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_InitPin+0x1e4>
     f1a:	66 0f       	add	r22, r22
     f1c:	77 1f       	adc	r23, r23
     f1e:	8a 95       	dec	r24
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_InitPin+0x1e0>
     f22:	cb 01       	movw	r24, r22
     f24:	96 2f       	mov	r25, r22
     f26:	90 95       	com	r25
     f28:	94 23       	and	r25, r20
     f2a:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pin_num);
     f2c:	92 b3       	in	r25, 0x12	; 18
     f2e:	89 2b       	or	r24, r25
     f30:	82 bb       	out	0x12, r24	; 18
     f32:	08 95       	ret

00000f34 <DIO_Init>:
#include "DIO_Interface.h"
#include "DIO_Private.h"
#define PORT_SIZE 8   //bits number in ports

void DIO_Init(void)
{
     f34:	cf 93       	push	r28
		DIO_Pin_type i;
	 	for (i=PINA0;i<TOTAL_PINS;i++)
     f36:	c0 e0       	ldi	r28, 0x00	; 0
     f38:	09 c0       	rjmp	.+18     	; 0xf4c <DIO_Init+0x18>
		{
	 		DIO_InitPin(i,PinsStatusArray[i]);
     f3a:	ec 2f       	mov	r30, r28
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	ee 52       	subi	r30, 0x2E	; 46
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	60 81       	ld	r22, Z
     f44:	8c 2f       	mov	r24, r28
     f46:	0e 94 9d 06 	call	0xd3a	; 0xd3a <DIO_InitPin>
#define PORT_SIZE 8   //bits number in ports

void DIO_Init(void)
{
		DIO_Pin_type i;
	 	for (i=PINA0;i<TOTAL_PINS;i++)
     f4a:	cf 5f       	subi	r28, 0xFF	; 255
     f4c:	c0 32       	cpi	r28, 0x20	; 32
     f4e:	a8 f3       	brcs	.-22     	; 0xf3a <DIO_Init+0x6>
		{
	 		DIO_InitPin(i,PinsStatusArray[i]);
		}
}
     f50:	cf 91       	pop	r28
     f52:	08 95       	ret

00000f54 <DIO_WritePin>:



void DIO_WritePin(DIO_Pin_type pin,DIO_PinVoltage_type volt)
{
	u8 port=pin/PORT_SIZE;
     f54:	98 2f       	mov	r25, r24
     f56:	96 95       	lsr	r25
     f58:	96 95       	lsr	r25
     f5a:	96 95       	lsr	r25
	u8 pin_num = pin%PORT_SIZE;
     f5c:	87 70       	andi	r24, 0x07	; 7
	if (volt==HIGH)
     f5e:	61 30       	cpi	r22, 0x01	; 1
     f60:	e1 f5       	brne	.+120    	; 0xfda <DIO_WritePin+0x86>
	{
		switch(port)
     f62:	91 30       	cpi	r25, 0x01	; 1
     f64:	99 f0       	breq	.+38     	; 0xf8c <DIO_WritePin+0x38>
     f66:	28 f0       	brcs	.+10     	; 0xf72 <DIO_WritePin+0x1e>
     f68:	92 30       	cpi	r25, 0x02	; 2
     f6a:	e9 f0       	breq	.+58     	; 0xfa6 <DIO_WritePin+0x52>
     f6c:	93 30       	cpi	r25, 0x03	; 3
     f6e:	41 f1       	breq	.+80     	; 0xfc0 <DIO_WritePin+0x6c>
     f70:	08 95       	ret
		{
			case PA:
			
			SET_BIT(PORTA,pin_num);
     f72:	4b b3       	in	r20, 0x1b	; 27
     f74:	21 e0       	ldi	r18, 0x01	; 1
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	b9 01       	movw	r22, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_WritePin+0x2c>
     f7c:	66 0f       	add	r22, r22
     f7e:	77 1f       	adc	r23, r23
     f80:	8a 95       	dec	r24
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_WritePin+0x28>
     f84:	cb 01       	movw	r24, r22
     f86:	84 2b       	or	r24, r20
     f88:	8b bb       	out	0x1b, r24	; 27
			break;
     f8a:	08 95       	ret
			case PB:
			
			SET_BIT(PORTB,pin_num);
     f8c:	48 b3       	in	r20, 0x18	; 24
     f8e:	21 e0       	ldi	r18, 0x01	; 1
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	b9 01       	movw	r22, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_WritePin+0x46>
     f96:	66 0f       	add	r22, r22
     f98:	77 1f       	adc	r23, r23
     f9a:	8a 95       	dec	r24
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_WritePin+0x42>
     f9e:	cb 01       	movw	r24, r22
     fa0:	84 2b       	or	r24, r20
     fa2:	88 bb       	out	0x18, r24	; 24
			break;
     fa4:	08 95       	ret
			case PC:
			
			SET_BIT(PORTC,pin_num);
     fa6:	45 b3       	in	r20, 0x15	; 21
     fa8:	21 e0       	ldi	r18, 0x01	; 1
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	b9 01       	movw	r22, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_WritePin+0x60>
     fb0:	66 0f       	add	r22, r22
     fb2:	77 1f       	adc	r23, r23
     fb4:	8a 95       	dec	r24
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_WritePin+0x5c>
     fb8:	cb 01       	movw	r24, r22
     fba:	84 2b       	or	r24, r20
     fbc:	85 bb       	out	0x15, r24	; 21
			break;
     fbe:	08 95       	ret
			case PD:
			
			SET_BIT(PORTD,pin_num);
     fc0:	42 b3       	in	r20, 0x12	; 18
     fc2:	21 e0       	ldi	r18, 0x01	; 1
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	b9 01       	movw	r22, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_WritePin+0x7a>
     fca:	66 0f       	add	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	8a 95       	dec	r24
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_WritePin+0x76>
     fd2:	cb 01       	movw	r24, r22
     fd4:	84 2b       	or	r24, r20
     fd6:	82 bb       	out	0x12, r24	; 18
			break;
     fd8:	08 95       	ret
		}
		
	}
	else if (volt==LOW)
     fda:	61 11       	cpse	r22, r1
     fdc:	3f c0       	rjmp	.+126    	; 0x105c <DIO_WritePin+0x108>
	{
		switch(pin/8)
     fde:	91 30       	cpi	r25, 0x01	; 1
     fe0:	a1 f0       	breq	.+40     	; 0x100a <DIO_WritePin+0xb6>
     fe2:	28 f0       	brcs	.+10     	; 0xfee <DIO_WritePin+0x9a>
     fe4:	92 30       	cpi	r25, 0x02	; 2
     fe6:	f9 f0       	breq	.+62     	; 0x1026 <DIO_WritePin+0xd2>
     fe8:	93 30       	cpi	r25, 0x03	; 3
     fea:	59 f1       	breq	.+86     	; 0x1042 <DIO_WritePin+0xee>
     fec:	08 95       	ret
		{
			case PA:
			
			CLR_BIT(PORTA,pin_num);
     fee:	4b b3       	in	r20, 0x1b	; 27
     ff0:	21 e0       	ldi	r18, 0x01	; 1
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	b9 01       	movw	r22, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_WritePin+0xa8>
     ff8:	66 0f       	add	r22, r22
     ffa:	77 1f       	adc	r23, r23
     ffc:	8a 95       	dec	r24
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_WritePin+0xa4>
    1000:	cb 01       	movw	r24, r22
    1002:	80 95       	com	r24
    1004:	84 23       	and	r24, r20
    1006:	8b bb       	out	0x1b, r24	; 27
			break;
    1008:	08 95       	ret
			case PB:
			
			CLR_BIT(PORTB,pin_num);
    100a:	48 b3       	in	r20, 0x18	; 24
    100c:	21 e0       	ldi	r18, 0x01	; 1
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	b9 01       	movw	r22, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_WritePin+0xc4>
    1014:	66 0f       	add	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	8a 95       	dec	r24
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_WritePin+0xc0>
    101c:	cb 01       	movw	r24, r22
    101e:	80 95       	com	r24
    1020:	84 23       	and	r24, r20
    1022:	88 bb       	out	0x18, r24	; 24
			break;
    1024:	08 95       	ret
			case PC:
			
			CLR_BIT(PORTC,pin_num);
    1026:	45 b3       	in	r20, 0x15	; 21
    1028:	21 e0       	ldi	r18, 0x01	; 1
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	b9 01       	movw	r22, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_WritePin+0xe0>
    1030:	66 0f       	add	r22, r22
    1032:	77 1f       	adc	r23, r23
    1034:	8a 95       	dec	r24
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_WritePin+0xdc>
    1038:	cb 01       	movw	r24, r22
    103a:	80 95       	com	r24
    103c:	84 23       	and	r24, r20
    103e:	85 bb       	out	0x15, r24	; 21
			break;
    1040:	08 95       	ret
			case PD:
			
			CLR_BIT(PORTD,pin_num);
    1042:	42 b3       	in	r20, 0x12	; 18
    1044:	21 e0       	ldi	r18, 0x01	; 1
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	b9 01       	movw	r22, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_WritePin+0xfc>
    104c:	66 0f       	add	r22, r22
    104e:	77 1f       	adc	r23, r23
    1050:	8a 95       	dec	r24
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_WritePin+0xf8>
    1054:	cb 01       	movw	r24, r22
    1056:	80 95       	com	r24
    1058:	84 23       	and	r24, r20
    105a:	82 bb       	out	0x12, r24	; 18
    105c:	08 95       	ret

0000105e <DIO_ReadPin>:
}


DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
	u8 port=pin/PORT_SIZE;
    105e:	98 2f       	mov	r25, r24
    1060:	96 95       	lsr	r25
    1062:	96 95       	lsr	r25
    1064:	96 95       	lsr	r25
	u8 pin_num = pin%PORT_SIZE;
    1066:	48 2f       	mov	r20, r24
    1068:	47 70       	andi	r20, 0x07	; 7
	DIO_PinVoltage_type volt=LOW;
	
	switch(port)
    106a:	91 30       	cpi	r25, 0x01	; 1
    106c:	81 f0       	breq	.+32     	; 0x108e <DIO_ReadPin+0x30>
    106e:	28 f0       	brcs	.+10     	; 0x107a <DIO_ReadPin+0x1c>
    1070:	92 30       	cpi	r25, 0x02	; 2
    1072:	b9 f0       	breq	.+46     	; 0x10a2 <DIO_ReadPin+0x44>
    1074:	93 30       	cpi	r25, 0x03	; 3
    1076:	f9 f0       	breq	.+62     	; 0x10b6 <DIO_ReadPin+0x58>
    1078:	28 c0       	rjmp	.+80     	; 0x10ca <DIO_ReadPin+0x6c>
	{
		case PA:
		
		volt=READ_BIT(PINA,pin_num);
    107a:	99 b3       	in	r25, 0x19	; 25
    107c:	89 2f       	mov	r24, r25
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_ReadPin+0x28>
    1082:	95 95       	asr	r25
    1084:	87 95       	ror	r24
    1086:	4a 95       	dec	r20
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_ReadPin+0x24>
    108a:	81 70       	andi	r24, 0x01	; 1
		break;
    108c:	08 95       	ret
		case PB:
		
		volt=READ_BIT(PINB,pin_num);
    108e:	26 b3       	in	r18, 0x16	; 22
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	c9 01       	movw	r24, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_ReadPin+0x3c>
    1096:	95 95       	asr	r25
    1098:	87 95       	ror	r24
    109a:	4a 95       	dec	r20
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_ReadPin+0x38>
    109e:	81 70       	andi	r24, 0x01	; 1
		break;
    10a0:	08 95       	ret
		case PC:
		
		volt=READ_BIT(PINC,pin_num);
    10a2:	23 b3       	in	r18, 0x13	; 19
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	c9 01       	movw	r24, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_ReadPin+0x50>
    10aa:	95 95       	asr	r25
    10ac:	87 95       	ror	r24
    10ae:	4a 95       	dec	r20
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_ReadPin+0x4c>
    10b2:	81 70       	andi	r24, 0x01	; 1
		break;
    10b4:	08 95       	ret
		case PD:
		
		volt=READ_BIT(PIND,pin_num);
    10b6:	20 b3       	in	r18, 0x10	; 16
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	c9 01       	movw	r24, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_ReadPin+0x64>
    10be:	95 95       	asr	r25
    10c0:	87 95       	ror	r24
    10c2:	4a 95       	dec	r20
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_ReadPin+0x60>
    10c6:	81 70       	andi	r24, 0x01	; 1
		break;
    10c8:	08 95       	ret

DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
	u8 port=pin/PORT_SIZE;
	u8 pin_num = pin%PORT_SIZE;
	DIO_PinVoltage_type volt=LOW;
    10ca:	80 e0       	ldi	r24, 0x00	; 0
		volt=READ_BIT(PIND,pin_num);
		break;
	}
	
	return volt;
}
    10cc:	08 95       	ret

000010ce <__udivmodsi4>:
    10ce:	a1 e2       	ldi	r26, 0x21	; 33
    10d0:	1a 2e       	mov	r1, r26
    10d2:	aa 1b       	sub	r26, r26
    10d4:	bb 1b       	sub	r27, r27
    10d6:	fd 01       	movw	r30, r26
    10d8:	0d c0       	rjmp	.+26     	; 0x10f4 <__udivmodsi4_ep>

000010da <__udivmodsi4_loop>:
    10da:	aa 1f       	adc	r26, r26
    10dc:	bb 1f       	adc	r27, r27
    10de:	ee 1f       	adc	r30, r30
    10e0:	ff 1f       	adc	r31, r31
    10e2:	a2 17       	cp	r26, r18
    10e4:	b3 07       	cpc	r27, r19
    10e6:	e4 07       	cpc	r30, r20
    10e8:	f5 07       	cpc	r31, r21
    10ea:	20 f0       	brcs	.+8      	; 0x10f4 <__udivmodsi4_ep>
    10ec:	a2 1b       	sub	r26, r18
    10ee:	b3 0b       	sbc	r27, r19
    10f0:	e4 0b       	sbc	r30, r20
    10f2:	f5 0b       	sbc	r31, r21

000010f4 <__udivmodsi4_ep>:
    10f4:	66 1f       	adc	r22, r22
    10f6:	77 1f       	adc	r23, r23
    10f8:	88 1f       	adc	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	1a 94       	dec	r1
    10fe:	69 f7       	brne	.-38     	; 0x10da <__udivmodsi4_loop>
    1100:	60 95       	com	r22
    1102:	70 95       	com	r23
    1104:	80 95       	com	r24
    1106:	90 95       	com	r25
    1108:	9b 01       	movw	r18, r22
    110a:	ac 01       	movw	r20, r24
    110c:	bd 01       	movw	r22, r26
    110e:	cf 01       	movw	r24, r30
    1110:	08 95       	ret

00001112 <__divmodsi4>:
    1112:	05 2e       	mov	r0, r21
    1114:	97 fb       	bst	r25, 7
    1116:	1e f4       	brtc	.+6      	; 0x111e <__divmodsi4+0xc>
    1118:	00 94       	com	r0
    111a:	0e 94 a0 08 	call	0x1140	; 0x1140 <__negsi2>
    111e:	57 fd       	sbrc	r21, 7
    1120:	07 d0       	rcall	.+14     	; 0x1130 <__divmodsi4_neg2>
    1122:	0e 94 67 08 	call	0x10ce	; 0x10ce <__udivmodsi4>
    1126:	07 fc       	sbrc	r0, 7
    1128:	03 d0       	rcall	.+6      	; 0x1130 <__divmodsi4_neg2>
    112a:	4e f4       	brtc	.+18     	; 0x113e <__divmodsi4_exit>
    112c:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__negsi2>

00001130 <__divmodsi4_neg2>:
    1130:	50 95       	com	r21
    1132:	40 95       	com	r20
    1134:	30 95       	com	r19
    1136:	21 95       	neg	r18
    1138:	3f 4f       	sbci	r19, 0xFF	; 255
    113a:	4f 4f       	sbci	r20, 0xFF	; 255
    113c:	5f 4f       	sbci	r21, 0xFF	; 255

0000113e <__divmodsi4_exit>:
    113e:	08 95       	ret

00001140 <__negsi2>:
    1140:	90 95       	com	r25
    1142:	80 95       	com	r24
    1144:	70 95       	com	r23
    1146:	61 95       	neg	r22
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	8f 4f       	sbci	r24, 0xFF	; 255
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	08 95       	ret

00001150 <_exit>:
    1150:	f8 94       	cli

00001152 <__stop_program>:
    1152:	ff cf       	rjmp	.-2      	; 0x1152 <__stop_program>
